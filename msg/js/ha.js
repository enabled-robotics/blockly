// This file was automatically generated.  Do not modify.

'use strict';

Blockly.Msg["ADD_COMMENT"] = "Daɗa Sharhi";
Blockly.Msg["BARCODE_DETECTOR_DESCRIPTION"] = "Detect a barcode, and save the data in a variable. </br>Supports EAN/UPC, Code 128, Code 39, Interleaved 2 of 5 and QR Codes.</br>To detect a barcode it is important that the barcode or QR codes is well within view of the camera and the smallest features of the code has a detectable size in the image.</br>The value of the barcode/QR code is stored as a string.";  // untranslated
Blockly.Msg["BARCODE_DETECTOR_TITLE"] = "Barcode Detection";  // untranslated
Blockly.Msg["BARCODE_DETECTOR_TOOLTIP"] = "Detect a barcode and save the data in a variable";  // untranslated
Blockly.Msg["CALIBRATE_TO_MARKER_DESCRIPTION"] = "Visual markers can be used to define local reference frames in the environment. To specify a reference based on a marker, first ensure that the marker is within view of the camera. Then do:</br>1) Specify the type of marker to calibrate to and the reference frame to use.</br>2) Press 'Calibrate To Marker' to store the calibration.</br>If the marker is correctly found the block will change from uninitialized (showing yellow warning triangle) to initialized. </br>When running the program the robot will detect the marker and update the reference. This way the robot can compensate for uncertainties cause by the mobile platform and reach targets relative to the market with high accuracy.</br>If the market cannot be detected the instruction will promt the user (generate popup in the user interface) where the user can ask to retry or cancel execution.";  // untranslated
Blockly.Msg["CALIBRATE_TO_MARKER_TITLE"] = "Calibrate to Marker";  // untranslated
Blockly.Msg["CALIBRATE_TO_MARKER_TOOLTIP"] = "Calibrate to a visual marker";  // untranslated
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "An kasa goge siffa '%1' sabo da tana daga sashi na bayanin aikin '%2'";
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Canza kima:";
Blockly.Msg["CLEAN_UP"] = "A share Bululluka";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Collapsed blocks contain warnings.";  // untranslated
Blockly.Msg["COLLAPSE_ALL"] = "Rusa Bululluka";
Blockly.Msg["COLLAPSE_BLOCK"] = "Rusa Bulo";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "launi na 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "launi na 2";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
Blockly.Msg["COLOUR_BLEND_RATIO"] = "lissafi";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "gauraya";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Ana gauraya launuka biyu tare da wani lissafi da aka bayar (0.0 - 1.0).";
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Zaɓi launi daga faifan launuka.";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "launuka da aka hargitsa";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Zaɓi launi daga wanɗanda aka hargitsa.";
Blockly.Msg["COLOUR_RGB_BLUE"] = "shuɗi";
Blockly.Msg["COLOUR_RGB_GREEN"] = "kore";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "http://www.december.com/html/spec/colorper.html";  // untranslated
Blockly.Msg["COLOUR_RGB_RED"] = "ja";
Blockly.Msg["COLOUR_RGB_TITLE"] = "launi tare da";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Ƙirƙiri launi tare da wani yawa da aka fayyace na ja, kore, da shuɗi. Duk kimomin dole su zamo tsakanin 0 da 100.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "ɓalle daga cikin kewaye";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "fara da maimaitawa ta gaba ta kewaye";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "ɓalle daga kewaye wanda ya ƙunsa.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Tsallake sauran wannan kewaye, sannan kuma a ci gaba da maimaitawa ta gaba ta kewaye.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Gargaɗi: Wannan bulon za a iya amfani da shi ne kawai a wajen kewaye.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "ga kowane abu %1 a cikin jeri %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "Ga kowane abu a jeri, saka siffar '%1' zuwa ga abin, sannan a maimaita wasu lambobin.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg["CONTROLS_FOR_TITLE"] = "Ƙirga da %1 daga %2 zuwa %3 ƙara %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Sami siffar '%1' ta ɗauki kowa ce kima daga lambar da aka fara da ita zuwa lambar da aka ƙare da ita, ana ƙirgawa daga wata tazara da aka fayyace. Maimaita wannan lamba a kowane lokaci:";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Daɗa sharaɗi zuwa idan bulo.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Daɗa na ƙarshe, sharaɗin kama-duk zuwa idan bulo.";
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Daɗa, cire, ko sake tsarin ɓangarori domin sake fasalin wannan idan bulo.";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "wani";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "wani idan";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "idan";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "Idan kima gaskiya ce, to a yi wasu maganganu.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "Idan kimar gaskiya ce, to a yi bulo na farko na maganganu. Idan ba haka ba, yi bulo na biyu na maganganu.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "Idan kimar farko gaskiya ce, to yi bulon farko na maganganun. In ba haka ba, idan kima ta biyu ce gaskiya, yi bolu na biyu na maganganun.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "Idan kimar farko gaskiya ce, to yi bulon farko na maganganun. In ba haka ba, idan kima ta biyu ce gaskiya, yi bolu na biyu na maganganun. Idan babu kimar da take gaskiya, yi bulo na ƙarshe na maganganun.";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "yi";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "maimaita sau %1";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Yi wasu bayanai sau da dama.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "maimaita har sai";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "maimaita yayin da";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Yayin da wata kima ta zama ƙarya, maimaita wasu lambobi.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Yayin da wata kima ta zama gaskiya, maimaita wasu lambobi.";
Blockly.Msg["DELETE_ALL_BLOCKS"] = "A goge duk bululluka %1?";
Blockly.Msg["DELETE_BLOCK"] = "Goge Bulo";
Blockly.Msg["DELETE_VARIABLE"] = "A goge siffar '%1'";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "A goge amfanunnukan %1 na siffar '%2'?";
Blockly.Msg["DELETE_X_BLOCKS"] = "Goge Bulo %1";
Blockly.Msg["DISABLE_BLOCK"] = "Kashe Bulo";
Blockly.Msg["DUPLICATE_BLOCK"] = "Yi kwafi";
Blockly.Msg["DUPLICATE_COMMENT"] = "Kwafi Sharhi";
Blockly.Msg["ENABLE_BLOCK"] = "Kunna Bulo";
Blockly.Msg["ER_ANALOG_IO_VALUE_DESCRIPTION"] = "Get value of analog IO.</br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box. </br>2) Select which of the IO Pins to read</br>Supports both getting the values of inputs and accessing values of outputs.</br>The value is return as a number.";  // untranslated
Blockly.Msg["ER_ANALOG_IO_VALUE_TITLE"] = "Analog IO";  // untranslated
Blockly.Msg["ER_ANALOG_IO_VALUE_TOOLTIP"] = "Value of Analog IO";  // untranslated
Blockly.Msg["ER_ARRAY_DESCRIPTION"] = "Array of numbers.</br>The size of the array can be extended and reduced selecting Add or Remove Element. Elements are alway appended to and removed from the back of the list.";  // untranslated
Blockly.Msg["ER_ARRAY_TITLE"] = "Array";  // untranslated
Blockly.Msg["ER_ARRAY_TOOLTIP"] = "Array of numbers";  // untranslated
Blockly.Msg["ER_BATTERY_POWER_PERCENTAGE_DESCRIPTION"] = "Value for remaining battery power in percentages.</br>The value if of type number";  // untranslated
Blockly.Msg["ER_BATTERY_POWER_PERCENTAGE_TITLE"] = "Battery Power Percentage";  // untranslated
Blockly.Msg["ER_BATTERY_POWER_PERCENTAGE_TOOLTIP"] = "Remaining battery power in percentages";  // untranslated
Blockly.Msg["ER_BOXPATTERN_DESCRIPTION"] = "Defines a set of positions in a box shaped (rectanglar) pattern";  // untranslated
Blockly.Msg["ER_BOXPATTERN_TITLE"] = "Box Pattern";  // untranslated
Blockly.Msg["ER_BOXPATTERN_TOOLTIP"] = "Defines box shaped (rectangular) pattern";  // untranslated
Blockly.Msg["ER_CALL_FUNCTION_BLOCK_DESCRIPTION"] = "Executes the instructions defined in a 'Function Block'";  // untranslated
Blockly.Msg["ER_CALL_FUNCTION_BLOCK_TITLE"] = "Call Function Block";  // untranslated
Blockly.Msg["ER_CALL_FUNCTION_BLOCK_TOOLTIP"] = "Call Function Block";  // untranslated
Blockly.Msg["ER_CONTROLS_IF_DESCRIPTION"] = "If construct with optional 'else if' and 'else'.</br>The 'If' block branches based on whether the specified condition is true or false. The condition needs to evaluate to a boolean type.</br>The 'If' block can be reconfigured to include a number of 'else if' constructs and/or an 'else' construct by clicking the small gear in the top left corner of the block.";  // untranslated
Blockly.Msg["ER_CONTROLS_IF_TITLE"] = "If";  // untranslated
Blockly.Msg["ER_CONTROLS_IF_TOOLTIP"] = "If construct with optional 'else if' and 'else'";  // untranslated
Blockly.Msg["ER_CONTROLS_REPEAT_DESCRIPTION"] = "Repeats the instructions in the body of the block the specified number of times.";  // untranslated
Blockly.Msg["ER_CONTROLS_REPEAT_TITLE"] = "Repeat";  // untranslated
Blockly.Msg["ER_CONTROLS_REPEAT_TOOLTIP"] = "Repeats a set of instruction a number of times";  // untranslated
Blockly.Msg["ER_CONTROLS_WHILE_DESCRIPTION"] = "Repeats the instructions in the body of the block until until the specified condtion is met";  // untranslated
Blockly.Msg["ER_CONTROLS_WHILE_TITLE"] = "While";  // untranslated
Blockly.Msg["ER_CONTROLS_WHILE_TOOLTIP"] = "Repeats a set of instructions untill a condtion is met";  // untranslated
Blockly.Msg["ER_DEFINE_REFERENCE_DESCRIPTION"] = "Updates the value of a reference.</br>When a reference is updated all motions relative to this reference will be relative to the new values.</br>This block enables to reuse same movements in a number of different locations. For instance, if having to execute the same assembly sequence in four locations, the movements can be programmed relative to a reference and only the reference will have to be updated for the four different locations.";  // untranslated
Blockly.Msg["ER_DEFINE_REFERENCE_TITLE"] = "Set a Reference";  // untranslated
Blockly.Msg["ER_DEFINE_REFERENCE_TOOLTIP"] = "Updates value of a reference";  // untranslated
Blockly.Msg["ER_DIG_IO_VALUE_DESCRIPTION"] = "Get value of digital IO.</br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box. </br>2) Select which of the IO Pins to read</br>Supports both getting the values of inputs and accessing values of outputs.</br>The value is return as a boolean.";  // untranslated
Blockly.Msg["ER_DIG_IO_VALUE_TITLE"] = "Digital IO";  // untranslated
Blockly.Msg["ER_DIG_IO_VALUE_TOOLTIP"] = "Value of Digital IO";  // untranslated
Blockly.Msg["ER_DRIVE_TO_CHARGING_STATION_DESCRIPTION"] = "Drive to the specified charging station and start charging.</br>Charging stations are defined within the map of the MiR. Consult the user manual for details on how ot define a charging station.";  // untranslated
Blockly.Msg["ER_DRIVE_TO_CHARGING_STATION_TITLE"] = "Drive to Charging Station";  // untranslated
Blockly.Msg["ER_DRIVE_TO_CHARGING_STATION_TOOLTIP"] = "Drive to the specified charging station and start charging";  // untranslated
Blockly.Msg["ER_DRIVE_TO_COORDINATES_DESCRIPTION"] = "Drive to the waypoints defined in the body of the instruction.";  // untranslated
Blockly.Msg["ER_DRIVE_TO_COORDINATES_TITLE"] = "Drive to Waypoints";  // untranslated
Blockly.Msg["ER_DRIVE_TO_COORDINATES_TOOLTIP"] = "Drive to the waypoints defined in the body of the instruction";  // untranslated
Blockly.Msg["ER_DRIVE_TO_DEFINED_POSITION_DESCRIPTION"] = "Positions can be defined directly in the map of the mobile robot and selected as targets using the 'Drive to Position' block.";  // untranslated
Blockly.Msg["ER_DRIVE_TO_DEFINED_POSITION_TITLE"] = "Drive to Position";  // untranslated
Blockly.Msg["ER_DRIVE_TO_DEFINED_POSITION_TOOLTIP"] = "Drive to a named position defined for the mobile robot";  // untranslated
Blockly.Msg["ER_EXIT_DESCRIPTION"] = "Exits the program being executed.</br>Can be used if the program needs to stop given a certain condition. For instance if there are no objects/markers detected.";  // untranslated
Blockly.Msg["ER_EXIT_TITLE"] = "Exit";  // untranslated
Blockly.Msg["ER_EXIT_TOOLTIP"] = "When called stops the program";  // untranslated
Blockly.Msg["ER_FORCE_ALIGN_DESCRIPTION"] = "The 'Force Align' block moves in a specified direction (defined with direction vector in given reference frame) until in contact with an object. When reaching contact it aligns the object to the surface using an impedance control.";  // untranslated
Blockly.Msg["ER_FORCE_ALIGN_TITLE"] = "Force Align";  // untranslated
Blockly.Msg["ER_FORCE_ALIGN_TOOLTIP"] = "Aligns to a surface using force/torque sensor.";  // untranslated
Blockly.Msg["ER_FUNCTION_BLOCK_DESCRIPTION"] = "Defines a sequence of instructions which can be called as a function.</br>The instrutions of the 'Function Block' is called as if they where inlined in the sequence of the caller.</br>Variables are therefore not subject to scope.";  // untranslated
Blockly.Msg["ER_FUNCTION_BLOCK_TITLE"] = "Function Block";  // untranslated
Blockly.Msg["ER_FUNCTION_BLOCK_TOOLTIP"] = "Defines a function that can be called multile times from the main program";  // untranslated
Blockly.Msg["ER_GRIPPER_MOVEQ_DESCRIPTION"] = "Open/close gripper to specified configuration";  // untranslated
Blockly.Msg["ER_GRIPPER_MOVEQ_TITLE"] = "Gripper Open/Close";  // untranslated
Blockly.Msg["ER_GRIPPER_MOVEQ_TOOLTIP"] = "Gripper Open/Close";  // untranslated
Blockly.Msg["ER_IS_TIME_DESCRIPTION"] = "Compares the current time with a set time.</br>The block support checking if time is equal, not equal, less than, less than or equal, greater than or greater than or equal.</br>Time is compared based on hours and minutes. ";  // untranslated
Blockly.Msg["ER_IS_TIME_TITLE"] = "Compares the Time";  // untranslated
Blockly.Msg["ER_IS_TIME_TOOLTIP"] = "Compares the current time with a set time";  // untranslated
Blockly.Msg["ER_LOGIC_BOOLEAN_DESCRIPTION"] = "Boolean block, set to either true or false";  // untranslated
Blockly.Msg["ER_LOGIC_BOOLEAN_TITLE"] = "Boolean";  // untranslated
Blockly.Msg["ER_LOGIC_BOOLEAN_TOOLTIP"] = "Boolean, either true or false";  // untranslated
Blockly.Msg["ER_LOGIC_COMPARE_DESCRIPTION"] = "Performs a logic comparison of two values.</br>Select which type of comparison to perform.</br>Assumes that the left and right hand sides of the comparison has identical data types. If the data types and incompatible the compare operator throws an exception. The exception can be caught using the 'Try Catch' construct. Failing to catch the exception will cause the program to halt.";  // untranslated
Blockly.Msg["ER_LOGIC_COMPARE_TITLE"] = "Compare";  // untranslated
Blockly.Msg["ER_LOGIC_COMPARE_TOOLTIP"] = "Logical comparison";  // untranslated
Blockly.Msg["ER_LOGIC_NEGATE_DESCRIPTION"] = "Negates boolean value.</br>The block only accepts values of boolean type. If needed to regate the value of a variable you need to create a logical comparison to extract the value of the variable.";  // untranslated
Blockly.Msg["ER_LOGIC_NEGATE_TITLE"] = "Negates Boolean Value";  // untranslated
Blockly.Msg["ER_LOGIC_NEGATE_TOOLTIP"] = "Negates boolean value";  // untranslated
Blockly.Msg["ER_LOGIC_OPERATION_DESCRIPTION"] = "Performs a logic operation of two boolean expression.</br>Select which type of operation to perform. The type can be logic 'and' or 'or'.</br>If the right and left hand sides of the expression do not evaluate to boolean expressions the operation throws an exception. The exception can be caught using the 'Try Catch' construct. Failing to catch the exception will cause the program to halt.";  // untranslated
Blockly.Msg["ER_LOGIC_OPERATION_TITLE"] = "Logic Operation";  // untranslated
Blockly.Msg["ER_LOGIC_OPERATION_TOOLTIP"] = "Logic Operation";  // untranslated
Blockly.Msg["ER_MATH_DESCRIPTION"] = "Provides functionality for adding, subtracting, multiplying and dividing.</br>If adding numbers or boolean with a string, the result becomes a string.</br>If the expressions do not valuate to numbers the operation throws an exception. The exception can be caught using the 'Try Catch' construct. Failing to catch the exception will cause the program to halt.";  // untranslated
Blockly.Msg["ER_MATH_NUMBER_DESCRIPTION"] = "Number value.</br>Numbers are represented a floating point values with double precision.";  // untranslated
Blockly.Msg["ER_MATH_NUMBER_TITLE"] = "Number";  // untranslated
Blockly.Msg["ER_MATH_NUMBER_TOOLTIP"] = "Number value";  // untranslated
Blockly.Msg["ER_MATH_TITLE"] = "Number Operation";  // untranslated
Blockly.Msg["ER_MATH_TOOLTIP"] = "Basic mathematical +,-,*,/ operations";  // untranslated
Blockly.Msg["ER_MIR_COORDINATES_DESCRIPTION"] = "Position (X, Y) in meter and orientation (Angle) in degrees. </br>Positions are relative to the internal map of the mobile robot. This reference is defined as the World frame.";  // untranslated
Blockly.Msg["ER_MIR_COORDINATES_TITLE"] = "Position";  // untranslated
Blockly.Msg["ER_MIR_COORDINATES_TOOLTIP"] = "Position (X, Y) in meter and orientation (Angle) in degrees";  // untranslated
Blockly.Msg["ER_MIR_MISSIONS_DESCRIPTION"] = "Missions defined in the MiR can be called using the 'Execute MiR Mission' block. Execution a mission blocks the program unil the execution of the MiR mission is finished.</br>This functionality is intended to enable user to define subprograms as mission within the MiR making advanced functionality (e.g. operating elevators) available.";  // untranslated
Blockly.Msg["ER_MIR_MISSIONS_TITLE"] = "Execute MiR Mission";  // untranslated
Blockly.Msg["ER_MIR_MISSIONS_TOOLTIP"] = "Executes a MiR mission from the MiR interface";  // untranslated
Blockly.Msg["ER_PALLETIZE_DESCRIPTION"] = "The 'Palletize' block runs a sequence of instruction for the specified amount locations specified in a pattern.</br>If a pattern is shared as a variable among multiple 'Palletize' blocks the pattern will keep track of the next location to apply.";  // untranslated
Blockly.Msg["ER_PALLETIZE_TITLE"] = "Palletize";  // untranslated
Blockly.Msg["ER_PALLETIZE_TOOLTIP"] = "Runs a sequence of instructions in a given pattern";  // untranslated
Blockly.Msg["ER_POPUP_DESCRIPTION"] = "Generated Popup message for the user. </br>The user can select to confirm with and Ok or Cancel. The result is stored as a boolean in a variable, where Ok is true and Cancel is false. This variable can later be used to branch the program based on the user input.";  // untranslated
Blockly.Msg["ER_POPUP_TITLE"] = "Popup";  // untranslated
Blockly.Msg["ER_POPUP_TOOLTIP"] = "Popup message with true/false return value";  // untranslated
Blockly.Msg["ER_PROGRAM_DESCRIPTION"] = "Defines program to be executed. </br>This block is mandatory and exactly one block will always exist.";  // untranslated
Blockly.Msg["ER_PROGRAM_TITLE"] = "Program";  // untranslated
Blockly.Msg["ER_PROGRAM_TOOLTIP"] = "Defines program to be executed";  // untranslated
Blockly.Msg["ER_Q_DESCRIPTION"] = "Configuration of the robot arm specified by joint angles. All angles specified in degrees.";  // untranslated
Blockly.Msg["ER_Q_TITLE"] = "Joint Configuration";  // untranslated
Blockly.Msg["ER_Q_TOOLTIP"] = "Configuration of the robot arm specified by joint angles. All angles specified in degrees.";  // untranslated
Blockly.Msg["ER_SET_ANALOG_OUTPUT_DESCRIPTION"] = "Set value of analog output.</br></br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box. </br>2) Select which of the IO Pins to set</br>3) Select the value";  // untranslated
Blockly.Msg["ER_SET_ANALOG_OUTPUT_TITLE"] = "Set Analog Output";  // untranslated
Blockly.Msg["ER_SET_ANALOG_OUTPUT_TOOLTIP"] = "Set value of analog output";  // untranslated
Blockly.Msg["ER_SET_DIGITAL_OUTPUT_DESCRIPTION"] = "Set value of digital output.</br></br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box</br>2) Select which of the IO Pins to set</br>3) Select the value.";  // untranslated
Blockly.Msg["ER_SET_DIGITAL_OUTPUT_TITLE"] = "Set Digital Output";  // untranslated
Blockly.Msg["ER_SET_DIGITAL_OUTPUT_TOOLTIP"] = "Set value of digital output";  // untranslated
Blockly.Msg["ER_SET_PAYLOAD_DESCRIPTION"] = "To set the payload of the arm two parameters needs to be given. <br/> 1) The actual payload measured in kg and <br/>2) The position [x,y,z] (in meters) of the Center of Mass (CoM) of the payload. The position is to be measured relative to the toolmount frame and NOT the  TCP frame.";  // untranslated
Blockly.Msg["ER_SET_PAYLOAD_TITLE"] = "Set Payload";  // untranslated
Blockly.Msg["ER_SET_PAYLOAD_TOOLTIP"] = "Set the payload of the arm";  // untranslated
Blockly.Msg["ER_SET_TCP_DESCRIPTION"] = "Sets the transformation between the tool flange (the end) of the robot arm and the actual TCP. <br/> Changing the TCP in the program will offset all movements specified relative to the TCP. Movements specified in joint angles will not be impacted.";  // untranslated
Blockly.Msg["ER_SET_TCP_TITLE"] = "Set TCP";  // untranslated
Blockly.Msg["ER_SET_TCP_TOOLTIP"] = "Set the TCP of the robot";  // untranslated
Blockly.Msg["ER_STRING_DESCRIPTION"] = "String value";  // untranslated
Blockly.Msg["ER_STRING_TITLE"] = "String";  // untranslated
Blockly.Msg["ER_STRING_TOOLTIP"] = "String value";  // untranslated
Blockly.Msg["ER_THROW_DESCRIPTION"] = "Throws an exception (error message), which can be caught by the Try-Catch block.</br>If the exception is not caught it will cause the program to halt.";  // untranslated
Blockly.Msg["ER_THROW_TITLE"] = "Throw";  // untranslated
Blockly.Msg["ER_THROW_TOOLTIP"] = "Throws an error message.";  // untranslated
Blockly.Msg["ER_TRY_CATCH_DESCRIPTION"] = "'Try Catch' structure enabling catching exceptions (errors) produced by the instructions in the Try section.</br>Only if an error is triggered the instructions specified within the Catch section is executed. Use the Catch section to handle the errors.";  // untranslated
Blockly.Msg["ER_TRY_CATCH_TITLE"] = "Try Catch";  // untranslated
Blockly.Msg["ER_TRY_CATCH_TOOLTIP"] = "Try Catch structure";  // untranslated
Blockly.Msg["ER_UR_ACTION_DESCRIPTION"] = "Execute the specified event on the UR.</br>The name of the event shall match the name of an 'EventNode' specific under the ER-Ability node in the UR Polyscope interface.</br>Parameters allows passing up to 20 numbers to the event. The parameters will be available as a list variable in the UR Polyscope interface.";  // untranslated
Blockly.Msg["ER_UR_ACTION_TITLE"] = "Execute Event on UR";  // untranslated
Blockly.Msg["ER_UR_ACTION_TOOLTIP"] = "Execute the specified event on the UR";  // untranslated
Blockly.Msg["ER_UR_GOTO_DESCRIPTION"] = "Move robot in joint-space.</br>Joint-space motions gives the shortest travel by the motors in the joint. However, the tools of the robot will not move in a straight line.</br>The motion is defined by the set of specified way points.</br>Associated to a 'Move PTP' block are parameters for the maximum velocity and acceleration and blend distance. There parameters are the default settings for moving between waypoints, but can be overridden in the individual waypoints.";  // untranslated
Blockly.Msg["ER_UR_GOTO_LIN_DESCRIPTION"] = "Move robot linear in tool space.</br>Linear motions in the tool space results in straight line movements of the tool. </br>The motion is defined by the set of specified way points.</br>Associated to a 'Move Linear' block are parameters for the maximum velocity and acceleration and blend distance. There parameters are the default settings for moving between waypoints, but can be overridden in the individual waypoints.";  // untranslated
Blockly.Msg["ER_UR_GOTO_LIN_TITLE"] = "Move Linear";  // untranslated
Blockly.Msg["ER_UR_GOTO_LIN_TOOLTIP"] = "Move robot linear in tool space";  // untranslated
Blockly.Msg["ER_UR_GOTO_TITLE"] = "Move PTP";  // untranslated
Blockly.Msg["ER_UR_GOTO_TOOLTIP"] = "Move robot in joint-space";  // untranslated
Blockly.Msg["ER_UR_MOVE_REL_DESCRIPTION"] = "Executes a number of relative motions defined within the body of the block.";  // untranslated
Blockly.Msg["ER_UR_MOVE_REL_TITLE"] = "Move Relative";  // untranslated
Blockly.Msg["ER_UR_MOVE_REL_TOOLTIP"] = "Executes a number of relative motions";  // untranslated
Blockly.Msg["ER_UR_REL_MOTION_DESCRIPTION"] = "A relative motion can either be defined as:</br>1) A movement between to define waypoints</br>2) A direction (in 6D) where the length of the direction vector defines the distance to move.";  // untranslated
Blockly.Msg["ER_UR_REL_MOTION_TITLE"] = "Relative Motion";  // untranslated
Blockly.Msg["ER_UR_REL_MOTION_TOOLTIP"] = "Relative Motion";  // untranslated
Blockly.Msg["ER_UVC_SWEEP_DESCRIPTION"] = "Moves in a sweeping motion following the waypoints define in the block";  // untranslated
Blockly.Msg["ER_UVC_SWEEP_TITLE"] = "UVC sweep";  // untranslated
Blockly.Msg["ER_UVC_SWEEP_TOOLTIP"] = "Powers on the UVC lamp and sweeps across a definde area with a set speed";  // untranslated
Blockly.Msg["ER_VAR_GET_DESCRIPTION"] = "Get value of variable.</br>A variable is globally available in the program (including in sub functions) and can hold any data type available in the interface. </br>Variables and not persistent and values will not be remembers between to runs of the same program. A variables thus needs to be Set before it can be accessed. </br>Trying to get the value of a variable not yet defined results in an exception.";  // untranslated
Blockly.Msg["ER_VAR_GET_TITLE"] = "Get variable.";  // untranslated
Blockly.Msg["ER_VAR_GET_TOOLTIP"] = "Get value of variable.";  // untranslated
Blockly.Msg["ER_VAR_SET_DESCRIPTION"] = "Set value of variable.</br>A variable is globally available in the program (including in sub functions) and can hold any data type available in the interface. </br>Variables and not persistent and values will not be remembers between to runs of the same program.";  // untranslated
Blockly.Msg["ER_VAR_SET_TITLE"] = "Set Variable";  // untranslated
Blockly.Msg["ER_VAR_SET_TOOLTIP"] = "Set value of variable";  // untranslated
Blockly.Msg["ER_WAIT_DESCRIPTION"] = "Wait for the specified time before continuing execution.";  // untranslated
Blockly.Msg["ER_WAIT_FOR_MIR_PLC_DESCRIPTION"] = "Waits for a change in MiR Register before exeucting code define in the block.</br>The purpose of this block is to have the program work as a slave of the MiR, which can control the execution using the registers.";  // untranslated
Blockly.Msg["ER_WAIT_FOR_MIR_PLC_TITLE"] = "Wait for Change in MiR Register";  // untranslated
Blockly.Msg["ER_WAIT_FOR_MIR_PLC_TOOLTIP"] = "Waits for a change in MiR Register before exeucting code define in the block";  // untranslated
Blockly.Msg["ER_WAIT_TITLE"] = "Wait";  // untranslated
Blockly.Msg["ER_WAIT_TOOLTIP"] = "Wait for defined time";  // untranslated
Blockly.Msg["ER_WAIT_UNTIL_DESCRIPTION"] = "Waits until a condition is met";  // untranslated
Blockly.Msg["ER_WAIT_UNTIL_TITLE"] = "Wait Until";  // untranslated
Blockly.Msg["ER_WAIT_UNTIL_TOOLTIP"] = "Wait until condition";  // untranslated
Blockly.Msg["ER_WAYPOINT_MANIPULATOR_DESCRIPTION"] = "The 'Manipulator Waypoint' can be set to tree diffrent types:</br>1) A set configuration, this is usefull to guarantee the robot returns to the same roations of the joints.</br>2) A position and orientation defined as a XYZ coordinate and a ZYX Euler rotation. The position and orientation is for a specified tool frames and defined relative to a reference frame. </br>3) A variable that can be both a configuation and a pose</br>For each waypoint the user can define a desired velocity and acceleration for the associated motion and a blend parameter. If no parameters are defined the waypoint will inherit the block from the parenting 'Move PTP' or 'Move Linear' block.";  // untranslated
Blockly.Msg["ER_WAYPOINT_MANIPULATOR_TITLE"] = "Manipulator Waypoint";  // untranslated
Blockly.Msg["ER_WAYPOINT_MANIPULATOR_TOOLTIP"] = "A postion/configuration for the manipulator to move to can either be a constant or a variable";  // untranslated
Blockly.Msg["ER_WAYPOINT_MOBILE_DESCRIPTION"] = "A waypoint (target postion) for the mobile platform can either be specified as a constant or a variable.";  // untranslated
Blockly.Msg["ER_WAYPOINT_MOBILE_TITLE"] = "Mobile Waypoint";  // untranslated
Blockly.Msg["ER_WAYPOINT_MOBILE_TOOLTIP"] = "Target postion for the Mobile platform.";  // untranslated
Blockly.Msg["ER_XYZRPY_DESCRIPTION"] = "Position and orientation of the specified tool in the selected reference frame.</br>Position are in meters.</br>Orientation specified as ZYX Euler Angles and measured in degrees.";  // untranslated
Blockly.Msg["ER_XYZRPY_TITLE"] = "Tool Configuration";  // untranslated
Blockly.Msg["ER_XYZRPY_TOOLTIP"] = "Position and orientation of the tool";  // untranslated
Blockly.Msg["EXPAND_ALL"] = "Faɗaɗa Bulullaka";
Blockly.Msg["EXPAND_BLOCK"] = "Faɗaɗa Bulo";
Blockly.Msg["EXTERNAL_INPUTS"] = "Bayanan Waje";
Blockly.Msg["HELP"] = "Taimako";
Blockly.Msg["INLINE_INPUTS"] = "Bayanai na Cikin layi";
Blockly.Msg["IOS_CANCEL"] = "Soke";
Blockly.Msg["IOS_ERROR"] = "Kuskure";
Blockly.Msg["IOS_OK"] = "TO";
Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Daɗa Bayani";
Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Bar lamba";
Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "Wannan aikin yana da kwafin bayanai.";
Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "BAYANAI";
Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Daɗa";
Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+ Daɗa Siffa";
Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Goge";
Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "Ba za ka iya amfani da sunann siffa wanda ba komai ba.";
Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Sake suna";
Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Sunan siffa";
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "ƙirƙiri jeri wanda babu komai";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Ya dawo da jeri, na tsawon 0, wanda bai ƙunshi ajiye bayanai ba";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "jeri";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Daɗa, cire, ko sake tsarin ɓangarori domin sake fasalin wannan bulo.";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "ƙirƙiri jeri";
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Daɗa wani kaya zuwa jerin.";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "Ƙiƙiri jeri tare da kowace lamba na kayayyaki.";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "farko";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# daga ƙarshe";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_GET"] = "samowa";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "samowa da cirewa";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "ƙarshe";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "bazuwa";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "cire";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Ya dawo da wani abu na farko a cikin jeri.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Ya dawo da abin a wani gurbi da aka fayyace a cikin jeri.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Ya dawo da wani abu na ƙarshe a cikin jeri.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Ya dawo da wani abu a cikin jeri.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Ya cire kuma ya dawo da abin farko a cikin jeri.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Ya cire kuma ya dawo da abin a gurbin da aka fayyace a cikin jeri.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Ya cire kuma ya dawo da abin ƙarshe a cikin jeri.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Ya cire kuma ya dawo abu mai bazuwa a cikin jeri.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Ya cire abin farko a cikin jeri.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Ya cire wani abin a wani gurbi da aka fayyace a cikin jeri.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Ya cire abin ƙarshe a cikin jeri.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Ya cire abu mai bazuwa a cikin jeri.";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "zuwa # daga ƙarshe";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "zuwa #";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "zuwa ƙarshe";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "sami sashin jeri daga farko";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "sami sashin jeri daga # daga ƙarshe";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "sami sashin jeri daga #";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Ƙirƙiri kwafi na ɓangaren da aka fayyace daga wani jeri.";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 shine wani abu na ƙarshe.";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 shine wani abu na farko.";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "nemo afkuwar farko daga wani abu";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "nemo afkuwar ƙarshe daga wani abu";
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Ya dawo da jeri na farkon/ƙarshen afkuwa na wani abu a cikin jerin. Ya dawo da %1 idan ba a sami wani abin ba.";
Blockly.Msg["LISTS_INLIST"] = "a jeri";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 babu komai";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Ya dawo gaskiya idan jerin babu komai.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg["LISTS_LENGTH_TITLE"] = "tsawo na %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Ya dawo da tsawon wani jeri.";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg["LISTS_REPEAT_TITLE"] = "ƙirƙiri jeri tare da wani abu %1 da aka maimaita sau %2";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Ya ƙirƙiri jeri da ya ƙunshi wata kima da aka bayar da aka maimaita yawan lambar da aka fayyace.";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";  // untranslated
Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "juya %1";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Sauya tsarin kwafi daga jeri.";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "a matsayin";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "cusa a";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "shirya";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Ya cusa wani abin a farko na jeri.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Ya cusa wani abin a wani gurbi da aka fayyace a cikin jeri.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Ya maƙala wani abin a ƙarshe na jeri.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Cusa wani abu ta hanyar bazawa a cikin jeri.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Ya shirya abin farko a cikin jeri.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Ya shirya wani abin a wani gurbi da aka fayyace a cikin jeri.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Ya shirya abin ƙarshe a cikin jeri.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Ya shirya abu mai bazuwa a cikin jeri.";
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "hawa";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "sauka";
Blockly.Msg["LISTS_SORT_TITLE"] = "ware %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Ware kwafi na jeri.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "na haruffa, a=A";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "na lamba";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "na haruffa";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "yi jeri daga rubutu";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "yi rubutu daga jeri";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Haɗa jerin rubututtuka zuwa rubutu guda ɗaya, a raba tare da mai raba rubutu.";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Tsaga rubutu zuwa jerin rubututtuka, a karya a kowane mai raba kalmomi.";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "tare da mai raba kalmomi";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "ƙarya";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Ya koma kodai gaskiya ko ƙarya.";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "gaskiya";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Koma gaskiya idan duk bayanan sun yi dai dai da juna.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Koma gaskiya idan bayanin farko ya fi bayani na biyu yawa.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Koma gaskiya idan bayanin farko ya fi ko ya yi dai dai da bayani na biyu.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Koma gaskiya idan bayanin farko ya fi na biyu ƙanƙanta.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Koma gaskiya idan bayanin farko ya fi ƙanƙanta ko dai dai da bayani na biyu.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Koma gaskiya idan duk bayanan ba su yi dai dai da juna ba.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "ba %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Koma gaskiya idan bayanin ƙarya ne. Koma ƙarya idan bayanin gaskiya ne.";
Blockly.Msg["LOGIC_NULL"] = "maras amfani";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Ya koma maras amfani.";
Blockly.Msg["LOGIC_OPERATION_AND"] = "kuma";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg["LOGIC_OPERATION_OR"] = "ko";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Koma gaskiya idan duk bayanan gaskiya ne.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Koma gaskiya idan a ƙalla ɗayan bayanan gaskiya ne.";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "gwaji";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "idan ƙarya ne";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "idan gaskiya ne";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Duba sharaɗin a cikin 'gwaji'. Idan sharaɗin gaskiya ne, mayar da kimar 'idan gaskiya ne'; idan ba haka ba mayar da kimar 'idan ƙarya ne'.";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";  // untranslated
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Dawo da jumlar lambobin guda biyu.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Dawo da sakamakon lambobin guda biyu bayan an raba su da juna.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Dawo da bambancin lambobin guda biyu.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Dawo da ruɓin lambobin guda biyu.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Dawo da lambar farko wadda aka ɗaga ta zuwa ƙarfin lamba ta biyu.";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";
Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 na X:%1 Y:%2";
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Dawo da arctangent na tsinin (X, Y) a gwargwado daga -180 zuwa 180.";
Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg["MATH_CHANGE_TITLE"] = "canza %1 da %2";
Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "Daɗa wata lamba zuwa siffa '%1'.";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Dawo da ɗaya daga cikin sanannen zaunannen lissafi: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), ko ∞ (maras iyaka).";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "ƙarfi %1 ƙasa %2 sama %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Tsare lamba tsakanin lambobi da aka fayyace masu ƙarama da babbar kima (haɗawa).";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";  // untranslated
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "lamba ce da za a iya rabawa da";
Blockly.Msg["MATH_IS_EVEN"] = "lamba da za a iya rabawa da biyu";
Blockly.Msg["MATH_IS_NEGATIVE"] = "lamba ce da bata kai sufuli ba";
Blockly.Msg["MATH_IS_ODD"] = "lamba ce da ba za a iya rabawa da biyu ba";
Blockly.Msg["MATH_IS_POSITIVE"] = "lamba ce da tafi sufuli";
Blockly.Msg["MATH_IS_PRIME"] = "lamba ce da kawai za a iya rabawa da kanta";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Duba idan lamba ce da za a iya rabawa da biyu, lamba wadda ba za a iya rabawa da biyu ba, lamba ce kawai da za a iya rabawa da kanta, lamba ce cikakkiya,lamba ce da tafi sufuli, lamba ce da bata kai sufuli ba, lamba ce da za a iya rabawa da wata lamba. Ta dawo da gaskiya ko ƙarya.";
Blockly.Msg["MATH_IS_WHOLE"] = "lamba ce cikakkiya";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg["MATH_MODULO_TITLE"] = "saura daga raba %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Dawo da saura daga raba lambobin guda biyu.";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";  // untranslated
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "Lambda.";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";  // untranslated
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "Tsaka-tsaki na jeri";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "cikakke na jeri";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "tsakiyar jeri";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "Taƙaicewa na jeri";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "mai yawan bayyana na jeri";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "bazuwar kaya na jeri";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "matakan bambance-bambance na jeri";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "jumlar jeri";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Dawo da tsaka-tsaki (matsakaicin lissafi) na kimar lambobi dake cikin jerin.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Dawo da babbar lamba dake cikin jerin.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Dawo da lambar tsakiya ta cikin jeri.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Dawo da lambobi ƙanana a cikin jerin.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Dawo da jeri na abubuwan da suka fi bayyana a cikin jeri.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Dawo da bazuwar kaya daga jerin.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Dawo da matakan bambance-bambance na jeri.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Dawo da jumlar duk lambobi na cikin jerin.";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";  // untranslated
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "ɓangare mai buzuwa";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Dawo da ɓangare mai bazuwa tsakanin 0.0 (haɗawa) da 1.0 (rabewa).";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "bazuwar cikakkiyar lamba daga %1 zuwa %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Dawo da bazuwar cikakkiyar lamba tsakanin wani gwargwado da aka fayyace, haɗawa.";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "cika";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "cika ƙasa";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "cika sama";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Cika lamba sama ko ƙasa.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "cikakkiya";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "lamba da ta ruɓanya kanta";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Dawo da cikakkiyar kima na wata lamba.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Dawo da e zuwa ƙarfin wata lamba.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Dawo da jerin lambobi da aka tara ko aka ɗebe.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Dawo da tushe 10 na jerin lambobi da aka tara ko aka ɗebe na wata lamba.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Dawo da kishiya na wata lamba.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Dawo da 10 zuwa ƙarfin wata lamba.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Dawo da wata lamba da ta ruɓanya kanta.";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";  // untranslated
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";  // untranslated
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";  // untranslated
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";  // untranslated
Blockly.Msg["MATH_TRIG_COS"] = "cos";  // untranslated
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";  // untranslated
Blockly.Msg["MATH_TRIG_TAN"] = "tan";  // untranslated
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Dawo da arccosine na wata lamba.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Dawo da arcsine na wata lamba.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Dawo da arctangent na wata lamba.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Dawo da cosine na wani gwargwado (banda layin kusurwar waje).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Dawo da sine na wani gwargwado (banda layin kusurwar waje).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Dawo da tangent na wani gwargwado (banda layin kusurwar waje).";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Ƙirƙiri siffa ta launi...";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Ƙirƙiri siffa ta lamba...";
Blockly.Msg["NEW_STRING_VARIABLE"] = "Ƙiriƙiri kalmar siffa...";
Blockly.Msg["NEW_VARIABLE"] = "Ƙirƙiri siffofi...";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "Sunan sabuwar siffa:";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "Irin sabuwar siffa:";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";  // untranslated
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "ƙyale bayanai";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "tare da:";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Gudanar da aiki '%1' wanda mai amfani ya ayyana.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Gudanar da aiki '%1' kuma a yi amfani da sakamakon sa.";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "tare da:";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Ƙirƙiri '%1'";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Kwatanta wannan aiki...";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";  // untranslated
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "yi";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "da";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Ya ƙirƙiri wani aiki ba tare da sakamako ba.";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "mayar";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Ya ƙirƙiri wani aiki ba tare da wani sakamako ba.";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Gardaɗi: Wannan aikin yana da ruɓi na gazawa.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Bayar da haske na bayanin aiki";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "Idan wata kima gaskiya ce, to dawo da kima ta biyu.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Gargaɗi: Za a iya amfani da wannan bulo ne kawai a cikin bayani na wani aiki.";
Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "saka suna:";
Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Daɗa wani bayani ga aikin.";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "bayani";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Daɗa, cire, ko sake tsarin bayani na wannan aiki.";
Blockly.Msg["REDO"] = "Sake";
Blockly.Msg["REMOVE_COMMENT"] = "Cire Sharhi";
Blockly.Msg["RENAME_VARIABLE"] = "Sake sunan siffa...";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Sake sunnan duk siffofi '%1' zuwa:";
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_APPEND_TITLE"] = "zuwa %1 daɗa rubutu %2";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Daɗa wani rubutu zuwa siffa ta '%1'.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "zuwa ƙananan baƙaƙe";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "zuwa Baƙaƙe Dake nuna Suna";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "zuwa MANYAN BAƘAƘE";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Return a copy of the text in a different case.";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "sami harafin farko";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "sami harafin # daga ƙarshe";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "sami harafin #";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg["TEXT_CHARAT_LAST"] = "sami harafin ƙarshe";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "sami harafi mai bazuwa";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";  // untranslated
Blockly.Msg["TEXT_CHARAT_TITLE"] = "ta rubutu %1 %2";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Ya dawo da harafi a gurbi da aka fayyace.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";  // untranslated
Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "ƙirga %1 a cikin %2";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Ƙirga sau nawa wani rubutu ya afku a cikin sauran wasu rubutu.";
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Daɗa wani kaya zuwa ga rubutun.";
Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "haɗa";
Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "Daɗa, cire, ko sake tsarin ɓangarori domin sake fasalin wannan bulo na rubutu.";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "zuwa harafin # daga ƙarshe";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "zuwa harafin #";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "zuwa harafi na ƙarshe";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "ta rubutu";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "sami sashin jumla daga harafin farko";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "sami sashin jumla daga harafin # daga ƙarshe";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "sami sashin jumla daga harafin #";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Ya dawo da ɓangaren rubutu da aka fayyace.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "nemo afkuwar farko ta rubutu";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "nemo afkuwar ƙarshe ta rubutu";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "ta rubutu %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "nemo a cikin rubutu. Returns %1 if text is not found.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 babu komai";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Ya dawo gaskiya idan rubutun da aka bayar babu komai.";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "ƙirƙiri rubutu da";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Ƙirƙiri guntun rubutu ta haɗa kowace lamba ta kayayyaki.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_LENGTH_TITLE"] = "tsawon %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Ya dawo lamba ta haruffa (da ya haɗa da sarari) a cikin rubutun da aka bayar.";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg["TEXT_PRINT_TITLE"] = "buga %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Buga rubutun da aka fayyace, lamba ko wata kima.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Samo wani mai amfani domin wata lamba.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Samo wani mai amfani domin wani rubutu.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "samo lamba tare da saƙo";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "samo rubutu tare da saƙo";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";  // untranslated
Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "maye gurbin %1 da %2 a cikin %3";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Maye gurbin duk afkuwa na wani rubutu a cikin wasu rubutu.";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";  // untranslated
Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "juya %1";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Ya juya tsari na haruffa a cikin rubutu.";
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "Harafi, kalma, ko layi na rubutu.";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "datse sarari daga ɓangarori guda biyu na";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "datse sarari daga ɓangaren hagu na";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "datse sarari daga ɓangaren dama na";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Dawo da kwafin rubutu tare da sauran sarari da aka cire daga ƙarshe ɗaya ko biyu.";
Blockly.Msg["TODAY"] = "Yau";
Blockly.Msg["UNDO"] = "Fasa";
Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "waniabu";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Ƙirƙiri 'set %1'";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Ya dawo da kima na wannan siffa.";
Blockly.Msg["VARIABLES_SET"] = "saita %1 zuwa %2";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Ƙirƙiri 'get %1'";
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Ya saita wannan siffa ta zama dai dai da bayanin.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "Tuni akwai sunnan siffa da aka kira '%1'.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "Tuni akwai sunan siffa da aka kira '%1' domin wata iri ta: '%2'.";
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Faɗi wani abu...";
Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];

Blockly.Msg["MATH_HUE"] = "230";
Blockly.Msg["LOOPS_HUE"] = "120";
Blockly.Msg["LISTS_HUE"] = "260";
Blockly.Msg["LOGIC_HUE"] = "210";
Blockly.Msg["VARIABLES_HUE"] = "330";
Blockly.Msg["TEXTS_HUE"] = "160";
Blockly.Msg["PROCEDURES_HUE"] = "290";
Blockly.Msg["COLOUR_HUE"] = "20";
Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "310";