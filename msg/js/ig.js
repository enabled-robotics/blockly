// This file was automatically generated.  Do not modify.

'use strict';

Blockly.Msg["ADD_COMMENT"] = "Tịnye okwu";
Blockly.Msg["BARCODE_DETECTOR_DESCRIPTION"] = "Detect a barcode, and save the data in a variable. </br>Supports EAN/UPC, Code 128, Code 39, Interleaved 2 of 5 and QR Codes.</br>To detect a barcode it is important that the barcode or QR codes is well within view of the camera and the smallest features of the code has a detectable size in the image.</br>The value of the barcode/QR code is stored as a string.";  // untranslated
Blockly.Msg["BARCODE_DETECTOR_TITLE"] = "Barcode Detection";  // untranslated
Blockly.Msg["BARCODE_DETECTOR_TOOLTIP"] = "Detect a barcode and save the data in a variable";  // untranslated
Blockly.Msg["CALIBRATE_TO_MARKER_DESCRIPTION"] = "Visual markers can be used to define local reference frames in the environment. To specify a reference based on a marker, first ensure that the marker is within view of the camera. Then do:</br>1) Specify the type of marker to calibrate to and the reference frame to use.</br>2) Press 'Calibrate To Marker' to store the calibration.</br>If the marker is correctly found the block will change from uninitialized (showing yellow warning triangle) to initialized. </br>When running the program the robot will detect the marker and update the reference. This way the robot can compensate for uncertainties cause by the mobile platform and reach targets relative to the market with high accuracy.</br>If the market cannot be detected the instruction will promt the user (generate popup in the user interface) where the user can ask to retry or cancel execution.";  // untranslated
Blockly.Msg["CALIBRATE_TO_MARKER_TITLE"] = "Calibrate to Marker";  // untranslated
Blockly.Msg["CALIBRATE_TO_MARKER_TOOLTIP"] = "Calibrate to a visual marker";  // untranslated
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Agaghị ekpochapụlị agbanwe '%1' maka nsonye ya na nkọwa nke ọrụ ahụ '%2'";
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Gbanwee akara:";
Blockly.Msg["CLEAN_UP"] = "Hichapụ ngọngọ";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Collapsed blocks contain warnings.";  // untranslated
Blockly.Msg["COLLAPSE_ALL"] = "Kwada Ngọngọ";
Blockly.Msg["COLLAPSE_BLOCK"] = "Kwada Ngọngọ";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "agba 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "agba 2";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
Blockly.Msg["COLOUR_BLEND_RATIO"] = "oke";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "ngwakọta";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Na ngwakọta agba abụọ ọnụ na na oke enyere (0.0 - 1.0).";
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://en.wikipedia.org/wiki/Color";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Họrọ agba site na palette.";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "agba ọbụla";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Họrọ agba na-nke ọbụla.";
Blockly.Msg["COLOUR_RGB_BLUE"] = "bluu";
Blockly.Msg["COLOUR_RGB_GREEN"] = "akwụkwọ ndụ";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "http://www.december.com/html/spec/colorper.html";  // untranslated
Blockly.Msg["COLOUR_RGB_RED"] = "uhie";
Blockly.Msg["COLOUR_RGB_TITLE"] = "agba ya na";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Mepụta agba nwere ọnụ ọgụgụ kpọmkwem nke agba uhie, akwụkwọ ndụ, na akara niile ga-adịrịrị n'etiti 0 rụọ 100.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "gbapuo na meghachi a";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "malite na nsoghari nke meghachi ozo";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Gba puo na gburugburu nke ọdị n’ime ya.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Wụọ mkpụchị meghachi ndị a fọdụrụ, ma gaa n'ihu na nsoghari nke aka.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Ịdọ aka ná ntị: Enwere ike iji ngọngọ a naanị n'ime meghachi.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "maka ihe ọ bụla %1 n'ime ndepụta %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "Maka ihe ọ bụla n'ime ndepụta, debe agbanwe '%1' na ihe ahụ, wee degharịa ụfọdụ koodu.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg["CONTROLS_FOR_TITLE"] = "gụọ na %1 site na %2 rụọ %3 tupu %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Nwere ngwakọta '%1' na akara ọbụla sịte na mbịdo ọnụọgụgụ rụọ na ngwụcha ọnụọgụgụ, na-ngụta sịtere na nkeji oge kpọmkwem. megharịa koodu oge ọbụla:";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Tinye ọnọdụ na ngọngọ ma ọ bụrụ.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Tinye ngwucha, ọnọdụ jide-niile na ngọngọ ma ọ bụrụ.";
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Tinye, wepu, ma ọ bụ megharia ngalaba iji haziearịa nke a ma ọ bụrụ na ngọngọ.";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "ọzọ";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "ọzọ ma ọ bụrụ";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "ọ bụrụ";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "Ọ bụrụ na akara bụ ezịọkwụ, mezie ụfọdụ okwu.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "Ọ bụrụ na akara bụ ezịọkwụ, mezie ngọngọ mbụ nke okwu. Ma ọ bụghị ya, mezie ngọngọ nke abụọ nke okwu.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "Ọ bụrụ na akara mbụ bụ ezịọkwụ, mezie ngọngọ mbụ nke okwu. Ma ọ bụghị ya, ọ bụrụ na akara nke abụọ bụ ezịọkwụ, mee ngọngọ nke abụọ nke okwu.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "Ọ bụrụ na akara mbụ bụ ezịọkwụ, mezie ngọngọ mbụ nke okwu. Ma ọ bụghị ya, ọ bụrụ na akara nke abụọ bụ ezịọkwụ, mee ngọngọ nke abụọ nke okwu. Ọ bụrụ na onweghị akara bụ ezịọkwụ, mee ngọngọ okwu ikpeazụ.";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "mee";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "meghachi ụgbọ %1";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Mee ụfọdụ okwu ọtụtụ ugboro.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "megharịa tụpụ";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "megharịa mgbe";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Ọ bụ ebe akara bụ ụgha, megharịa ụfọdụ koodu.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Ọ bụ ebe akara bụ ezịọkwụ, megharịa ụfọdụ koodu.";
Blockly.Msg["DELETE_ALL_BLOCKS"] = "Mkpọchi %1 ngọngọ niile?";
Blockly.Msg["DELETE_BLOCK"] = "Kpochapụ Ngọngọ";
Blockly.Msg["DELETE_VARIABLE"] = "Kpochapụ agbanwe ‘%1' ahu";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "Kpochapụ %1 ojịjị nke agbanwe '%2'?";
Blockly.Msg["DELETE_X_BLOCKS"] = "Kpochapụ %1 Ngọngọ";
Blockly.Msg["DISABLE_BLOCK"] = "Gbanyụọ Ngọngọ";
Blockly.Msg["DUPLICATE_BLOCK"] = "Ntụgharị";
Blockly.Msg["DUPLICATE_COMMENT"] = "Tụgharịa okwu";
Blockly.Msg["ENABLE_BLOCK"] = "Gbanye Ngọngọ";
Blockly.Msg["ER_ANALOG_IO_VALUE_DESCRIPTION"] = "Get value of analog IO.</br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box. </br>2) Select which of the IO Pins to read</br>Supports both getting the values of inputs and accessing values of outputs.</br>The value is return as a number.";  // untranslated
Blockly.Msg["ER_ANALOG_IO_VALUE_TITLE"] = "Analog IO";  // untranslated
Blockly.Msg["ER_ANALOG_IO_VALUE_TOOLTIP"] = "Value of Analog IO";  // untranslated
Blockly.Msg["ER_ARRAY_DESCRIPTION"] = "Array of numbers.</br>The size of the array can be extended and reduced selecting Add or Remove Element. Elements are alway appended to and removed from the back of the list.";  // untranslated
Blockly.Msg["ER_ARRAY_TITLE"] = "Array";  // untranslated
Blockly.Msg["ER_ARRAY_TOOLTIP"] = "Array of numbers";  // untranslated
Blockly.Msg["ER_BATTERY_POWER_PERCENTAGE_DESCRIPTION"] = "Value for remaining battery power in percentages.</br>The value if of type number";  // untranslated
Blockly.Msg["ER_BATTERY_POWER_PERCENTAGE_TITLE"] = "Battery Power Percentage";  // untranslated
Blockly.Msg["ER_BATTERY_POWER_PERCENTAGE_TOOLTIP"] = "Remaining battery power in percentages";  // untranslated
Blockly.Msg["ER_BOXPATTERN_DESCRIPTION"] = "Defines a set of positions in a box shaped (rectanglar) pattern";  // untranslated
Blockly.Msg["ER_BOXPATTERN_TITLE"] = "Box Pattern";  // untranslated
Blockly.Msg["ER_BOXPATTERN_TOOLTIP"] = "Defines box shaped (rectangular) pattern";  // untranslated
Blockly.Msg["ER_CALL_FUNCTION_BLOCK_DESCRIPTION"] = "Executes the instructions defined in a 'Function Block'";  // untranslated
Blockly.Msg["ER_CALL_FUNCTION_BLOCK_TITLE"] = "Call Function Block";  // untranslated
Blockly.Msg["ER_CALL_FUNCTION_BLOCK_TOOLTIP"] = "Call Function Block";  // untranslated
Blockly.Msg["ER_CONTROLS_IF_DESCRIPTION"] = "If construct with optional 'else if' and 'else'.</br>The 'If' block branches based on whether the specified condition is true or false. The condition needs to evaluate to a boolean type.</br>The 'If' block can be reconfigured to include a number of 'else if' constructs and/or an 'else' construct by clicking the small gear in the top left corner of the block.";  // untranslated
Blockly.Msg["ER_CONTROLS_IF_TITLE"] = "If";  // untranslated
Blockly.Msg["ER_CONTROLS_IF_TOOLTIP"] = "If construct with optional 'else if' and 'else'";  // untranslated
Blockly.Msg["ER_CONTROLS_REPEAT_DESCRIPTION"] = "Repeats the instructions in the body of the block the specified number of times.";  // untranslated
Blockly.Msg["ER_CONTROLS_REPEAT_TITLE"] = "Repeat";  // untranslated
Blockly.Msg["ER_CONTROLS_REPEAT_TOOLTIP"] = "Repeats a set of instruction a number of times";  // untranslated
Blockly.Msg["ER_CONTROLS_WHILE_DESCRIPTION"] = "Repeats the instructions in the body of the block until until the specified condtion is met";  // untranslated
Blockly.Msg["ER_CONTROLS_WHILE_TITLE"] = "While";  // untranslated
Blockly.Msg["ER_CONTROLS_WHILE_TOOLTIP"] = "Repeats a set of instructions untill a condtion is met";  // untranslated
Blockly.Msg["ER_DEFINE_REFERENCE_DESCRIPTION"] = "Updates the value of a reference.</br>When a reference is updated all motions relative to this reference will be relative to the new values.</br>This block enables to reuse same movements in a number of different locations. For instance, if having to execute the same assembly sequence in four locations, the movements can be programmed relative to a reference and only the reference will have to be updated for the four different locations.";  // untranslated
Blockly.Msg["ER_DEFINE_REFERENCE_TITLE"] = "Set a Reference";  // untranslated
Blockly.Msg["ER_DEFINE_REFERENCE_TOOLTIP"] = "Updates value of a reference";  // untranslated
Blockly.Msg["ER_DIG_IO_VALUE_DESCRIPTION"] = "Get value of digital IO.</br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box. </br>2) Select which of the IO Pins to read</br>Supports both getting the values of inputs and accessing values of outputs.</br>The value is return as a boolean.";  // untranslated
Blockly.Msg["ER_DIG_IO_VALUE_TITLE"] = "Digital IO";  // untranslated
Blockly.Msg["ER_DIG_IO_VALUE_TOOLTIP"] = "Value of Digital IO";  // untranslated
Blockly.Msg["ER_DRIVE_TO_CHARGING_STATION_DESCRIPTION"] = "Drive to the specified charging station and start charging.</br>Charging stations are defined within the map of the MiR. Consult the user manual for details on how ot define a charging station.";  // untranslated
Blockly.Msg["ER_DRIVE_TO_CHARGING_STATION_TITLE"] = "Drive to Charging Station";  // untranslated
Blockly.Msg["ER_DRIVE_TO_CHARGING_STATION_TOOLTIP"] = "Drive to the specified charging station and start charging";  // untranslated
Blockly.Msg["ER_DRIVE_TO_COORDINATES_DESCRIPTION"] = "Drive to the waypoints defined in the body of the instruction.";  // untranslated
Blockly.Msg["ER_DRIVE_TO_COORDINATES_TITLE"] = "Drive to Waypoints";  // untranslated
Blockly.Msg["ER_DRIVE_TO_COORDINATES_TOOLTIP"] = "Drive to the waypoints defined in the body of the instruction";  // untranslated
Blockly.Msg["ER_DRIVE_TO_DEFINED_POSITION_DESCRIPTION"] = "Positions can be defined directly in the map of the mobile robot and selected as targets using the 'Drive to Position' block.";  // untranslated
Blockly.Msg["ER_DRIVE_TO_DEFINED_POSITION_TITLE"] = "Drive to Position";  // untranslated
Blockly.Msg["ER_DRIVE_TO_DEFINED_POSITION_TOOLTIP"] = "Drive to a named position defined for the mobile robot";  // untranslated
Blockly.Msg["ER_EXIT_DESCRIPTION"] = "Exits the program being executed.</br>Can be used if the program needs to stop given a certain condition. For instance if there are no objects/markers detected.";  // untranslated
Blockly.Msg["ER_EXIT_TITLE"] = "Exit";  // untranslated
Blockly.Msg["ER_EXIT_TOOLTIP"] = "When called stops the program";  // untranslated
Blockly.Msg["ER_FORCE_ALIGN_DESCRIPTION"] = "The 'Force Align' block moves in a specified direction (defined with direction vector in given reference frame) until in contact with an object. When reaching contact it aligns the object to the surface using an impedance control.";  // untranslated
Blockly.Msg["ER_FORCE_ALIGN_TITLE"] = "Force Align";  // untranslated
Blockly.Msg["ER_FORCE_ALIGN_TOOLTIP"] = "Aligns to a surface using force/torque sensor.";  // untranslated
Blockly.Msg["ER_FUNCTION_BLOCK_DESCRIPTION"] = "Defines a sequence of instructions which can be called as a function.</br>The instrutions of the 'Function Block' is called as if they where inlined in the sequence of the caller.</br>Variables are therefore not subject to scope.";  // untranslated
Blockly.Msg["ER_FUNCTION_BLOCK_TITLE"] = "Function Block";  // untranslated
Blockly.Msg["ER_FUNCTION_BLOCK_TOOLTIP"] = "Defines a function that can be called multile times from the main program";  // untranslated
Blockly.Msg["ER_GRIPPER_MOVEQ_DESCRIPTION"] = "Open/close gripper to specified configuration";  // untranslated
Blockly.Msg["ER_GRIPPER_MOVEQ_TITLE"] = "Gripper Open/Close";  // untranslated
Blockly.Msg["ER_GRIPPER_MOVEQ_TOOLTIP"] = "Gripper Open/Close";  // untranslated
Blockly.Msg["ER_IS_TIME_DESCRIPTION"] = "Compares the current time with a set time.</br>The block support checking if time is equal, not equal, less than, less than or equal, greater than or greater than or equal.</br>Time is compared based on hours and minutes. ";  // untranslated
Blockly.Msg["ER_IS_TIME_TITLE"] = "Compares the Time";  // untranslated
Blockly.Msg["ER_IS_TIME_TOOLTIP"] = "Compares the current time with a set time";  // untranslated
Blockly.Msg["ER_LOGIC_BOOLEAN_DESCRIPTION"] = "Boolean block, set to either true or false";  // untranslated
Blockly.Msg["ER_LOGIC_BOOLEAN_TITLE"] = "Boolean";  // untranslated
Blockly.Msg["ER_LOGIC_BOOLEAN_TOOLTIP"] = "Boolean, either true or false";  // untranslated
Blockly.Msg["ER_LOGIC_COMPARE_DESCRIPTION"] = "Performs a logic comparison of two values.</br>Select which type of comparison to perform.</br>Assumes that the left and right hand sides of the comparison has identical data types. If the data types and incompatible the compare operator throws an exception. The exception can be caught using the 'Try Catch' construct. Failing to catch the exception will cause the program to halt.";  // untranslated
Blockly.Msg["ER_LOGIC_COMPARE_TITLE"] = "Compare";  // untranslated
Blockly.Msg["ER_LOGIC_COMPARE_TOOLTIP"] = "Logical comparison";  // untranslated
Blockly.Msg["ER_LOGIC_NEGATE_DESCRIPTION"] = "Negates boolean value.</br>The block only accepts values of boolean type. If needed to regate the value of a variable you need to create a logical comparison to extract the value of the variable.";  // untranslated
Blockly.Msg["ER_LOGIC_NEGATE_TITLE"] = "Negates Boolean Value";  // untranslated
Blockly.Msg["ER_LOGIC_NEGATE_TOOLTIP"] = "Negates boolean value";  // untranslated
Blockly.Msg["ER_LOGIC_OPERATION_DESCRIPTION"] = "Performs a logic operation of two boolean expression.</br>Select which type of operation to perform. The type can be logic 'and' or 'or'.</br>If the right and left hand sides of the expression do not evaluate to boolean expressions the operation throws an exception. The exception can be caught using the 'Try Catch' construct. Failing to catch the exception will cause the program to halt.";  // untranslated
Blockly.Msg["ER_LOGIC_OPERATION_TITLE"] = "Logic Operation";  // untranslated
Blockly.Msg["ER_LOGIC_OPERATION_TOOLTIP"] = "Logic Operation";  // untranslated
Blockly.Msg["ER_MATH_DESCRIPTION"] = "Provides functionality for adding, subtracting, multiplying and dividing.</br>If adding numbers or boolean with a string, the result becomes a string.</br>If the expressions do not valuate to numbers the operation throws an exception. The exception can be caught using the 'Try Catch' construct. Failing to catch the exception will cause the program to halt.";  // untranslated
Blockly.Msg["ER_MATH_NUMBER_DESCRIPTION"] = "Number value.</br>Numbers are represented a floating point values with double precision.";  // untranslated
Blockly.Msg["ER_MATH_NUMBER_TITLE"] = "Number";  // untranslated
Blockly.Msg["ER_MATH_NUMBER_TOOLTIP"] = "Number value";  // untranslated
Blockly.Msg["ER_MATH_TITLE"] = "Number Operation";  // untranslated
Blockly.Msg["ER_MATH_TOOLTIP"] = "Basic mathematical +,-,*,/ operations";  // untranslated
Blockly.Msg["ER_MIR_COORDINATES_DESCRIPTION"] = "Position (X, Y) in meter and orientation (Angle) in degrees. </br>Positions are relative to the internal map of the mobile robot. This reference is defined as the World frame.";  // untranslated
Blockly.Msg["ER_MIR_COORDINATES_TITLE"] = "Position";  // untranslated
Blockly.Msg["ER_MIR_COORDINATES_TOOLTIP"] = "Position (X, Y) in meter and orientation (Angle) in degrees";  // untranslated
Blockly.Msg["ER_MIR_MISSIONS_DESCRIPTION"] = "Missions defined in the MiR can be called using the 'Execute MiR Mission' block. Execution a mission blocks the program unil the execution of the MiR mission is finished.</br>This functionality is intended to enable user to define subprograms as mission within the MiR making advanced functionality (e.g. operating elevators) available.";  // untranslated
Blockly.Msg["ER_MIR_MISSIONS_TITLE"] = "Execute MiR Mission";  // untranslated
Blockly.Msg["ER_MIR_MISSIONS_TOOLTIP"] = "Executes a MiR mission from the MiR interface";  // untranslated
Blockly.Msg["ER_PALLETIZE_DESCRIPTION"] = "The 'Palletize' block runs a sequence of instruction for the specified amount locations specified in a pattern.</br>If a pattern is shared as a variable among multiple 'Palletize' blocks the pattern will keep track of the next location to apply.";  // untranslated
Blockly.Msg["ER_PALLETIZE_TITLE"] = "Palletize";  // untranslated
Blockly.Msg["ER_PALLETIZE_TOOLTIP"] = "Runs a sequence of instructions in a given pattern";  // untranslated
Blockly.Msg["ER_POPUP_DESCRIPTION"] = "Generated Popup message for the user. </br>The user can select to confirm with and Ok or Cancel. The result is stored as a boolean in a variable, where Ok is true and Cancel is false. This variable can later be used to branch the program based on the user input.";  // untranslated
Blockly.Msg["ER_POPUP_TITLE"] = "Popup";  // untranslated
Blockly.Msg["ER_POPUP_TOOLTIP"] = "Popup message with true/false return value";  // untranslated
Blockly.Msg["ER_PROGRAM_DESCRIPTION"] = "Defines program to be executed. </br>This block is mandatory and exactly one block will always exist.";  // untranslated
Blockly.Msg["ER_PROGRAM_TITLE"] = "Program";  // untranslated
Blockly.Msg["ER_PROGRAM_TOOLTIP"] = "Defines program to be executed";  // untranslated
Blockly.Msg["ER_Q_DESCRIPTION"] = "Configuration of the robot arm specified by joint angles. All angles specified in degrees.";  // untranslated
Blockly.Msg["ER_Q_TITLE"] = "Joint Configuration";  // untranslated
Blockly.Msg["ER_Q_TOOLTIP"] = "Configuration of the robot arm specified by joint angles. All angles specified in degrees.";  // untranslated
Blockly.Msg["ER_SET_ANALOG_OUTPUT_DESCRIPTION"] = "Set value of analog output.</br></br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box. </br>2) Select which of the IO Pins to set</br>3) Select the value";  // untranslated
Blockly.Msg["ER_SET_ANALOG_OUTPUT_TITLE"] = "Set Analog Output";  // untranslated
Blockly.Msg["ER_SET_ANALOG_OUTPUT_TOOLTIP"] = "Set value of analog output";  // untranslated
Blockly.Msg["ER_SET_DIGITAL_OUTPUT_DESCRIPTION"] = "Set value of digital output.</br></br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box</br>2) Select which of the IO Pins to set</br>3) Select the value.";  // untranslated
Blockly.Msg["ER_SET_DIGITAL_OUTPUT_TITLE"] = "Set Digital Output";  // untranslated
Blockly.Msg["ER_SET_DIGITAL_OUTPUT_TOOLTIP"] = "Set value of digital output";  // untranslated
Blockly.Msg["ER_SET_PAYLOAD_DESCRIPTION"] = "To set the payload of the arm two parameters needs to be given. <br/> 1) The actual payload measured in kg and <br/>2) The position [x,y,z] (in meters) of the Center of Mass (CoM) of the payload. The position is to be measured relative to the toolmount frame and NOT the  TCP frame.";  // untranslated
Blockly.Msg["ER_SET_PAYLOAD_TITLE"] = "Set Payload";  // untranslated
Blockly.Msg["ER_SET_PAYLOAD_TOOLTIP"] = "Set the payload of the arm";  // untranslated
Blockly.Msg["ER_SET_TCP_DESCRIPTION"] = "Sets the transformation between the tool flange (the end) of the robot arm and the actual TCP. <br/> Changing the TCP in the program will offset all movements specified relative to the TCP. Movements specified in joint angles will not be impacted.";  // untranslated
Blockly.Msg["ER_SET_TCP_TITLE"] = "Set TCP";  // untranslated
Blockly.Msg["ER_SET_TCP_TOOLTIP"] = "Set the TCP of the robot";  // untranslated
Blockly.Msg["ER_STRING_DESCRIPTION"] = "String value";  // untranslated
Blockly.Msg["ER_STRING_TITLE"] = "String";  // untranslated
Blockly.Msg["ER_STRING_TOOLTIP"] = "String value";  // untranslated
Blockly.Msg["ER_THROW_DESCRIPTION"] = "Throws an exception (error message), which can be caught by the Try-Catch block.</br>If the exception is not caught it will cause the program to halt.";  // untranslated
Blockly.Msg["ER_THROW_TITLE"] = "Throw";  // untranslated
Blockly.Msg["ER_THROW_TOOLTIP"] = "Throws an error message.";  // untranslated
Blockly.Msg["ER_TRY_CATCH_DESCRIPTION"] = "'Try Catch' structure enabling catching exceptions (errors) produced by the instructions in the Try section.</br>Only if an error is triggered the instructions specified within the Catch section is executed. Use the Catch section to handle the errors.";  // untranslated
Blockly.Msg["ER_TRY_CATCH_TITLE"] = "Try Catch";  // untranslated
Blockly.Msg["ER_TRY_CATCH_TOOLTIP"] = "Try Catch structure";  // untranslated
Blockly.Msg["ER_UR_ACTION_DESCRIPTION"] = "Execute the specified event on the UR.</br>The name of the event shall match the name of an 'EventNode' specific under the ER-Ability node in the UR Polyscope interface.</br>Parameters allows passing up to 20 numbers to the event. The parameters will be available as a list variable in the UR Polyscope interface.";  // untranslated
Blockly.Msg["ER_UR_ACTION_TITLE"] = "Execute Event on UR";  // untranslated
Blockly.Msg["ER_UR_ACTION_TOOLTIP"] = "Execute the specified event on the UR";  // untranslated
Blockly.Msg["ER_UR_GOTO_DESCRIPTION"] = "Move robot in joint-space.</br>Joint-space motions gives the shortest travel by the motors in the joint. However, the tools of the robot will not move in a straight line.</br>The motion is defined by the set of specified way points.</br>Associated to a 'Move PTP' block are parameters for the maximum velocity and acceleration and blend distance. There parameters are the default settings for moving between waypoints, but can be overridden in the individual waypoints.";  // untranslated
Blockly.Msg["ER_UR_GOTO_LIN_DESCRIPTION"] = "Move robot linear in tool space.</br>Linear motions in the tool space results in straight line movements of the tool. </br>The motion is defined by the set of specified way points.</br>Associated to a 'Move Linear' block are parameters for the maximum velocity and acceleration and blend distance. There parameters are the default settings for moving between waypoints, but can be overridden in the individual waypoints.";  // untranslated
Blockly.Msg["ER_UR_GOTO_LIN_TITLE"] = "Move Linear";  // untranslated
Blockly.Msg["ER_UR_GOTO_LIN_TOOLTIP"] = "Move robot linear in tool space";  // untranslated
Blockly.Msg["ER_UR_GOTO_TITLE"] = "Move PTP";  // untranslated
Blockly.Msg["ER_UR_GOTO_TOOLTIP"] = "Move robot in joint-space";  // untranslated
Blockly.Msg["ER_UR_MOVE_REL_DESCRIPTION"] = "Executes a number of relative motions defined within the body of the block.";  // untranslated
Blockly.Msg["ER_UR_MOVE_REL_TITLE"] = "Move Relative";  // untranslated
Blockly.Msg["ER_UR_MOVE_REL_TOOLTIP"] = "Executes a number of relative motions";  // untranslated
Blockly.Msg["ER_UR_REL_MOTION_DESCRIPTION"] = "A relative motion can either be defined as:</br>1) A movement between to define waypoints</br>2) A direction (in 6D) where the length of the direction vector defines the distance to move.";  // untranslated
Blockly.Msg["ER_UR_REL_MOTION_TITLE"] = "Relative Motion";  // untranslated
Blockly.Msg["ER_UR_REL_MOTION_TOOLTIP"] = "Relative Motion";  // untranslated
Blockly.Msg["ER_UVC_SWEEP_DESCRIPTION"] = "Moves in a sweeping motion following the waypoints define in the block";  // untranslated
Blockly.Msg["ER_UVC_SWEEP_TITLE"] = "UVC sweep";  // untranslated
Blockly.Msg["ER_UVC_SWEEP_TOOLTIP"] = "Powers on the UVC lamp and sweeps across a definde area with a set speed";  // untranslated
Blockly.Msg["ER_VAR_GET_DESCRIPTION"] = "Get value of variable.</br>A variable is globally available in the program (including in sub functions) and can hold any data type available in the interface. </br>Variables and not persistent and values will not be remembers between to runs of the same program. A variables thus needs to be Set before it can be accessed. </br>Trying to get the value of a variable not yet defined results in an exception.";  // untranslated
Blockly.Msg["ER_VAR_GET_TITLE"] = "Get variable.";  // untranslated
Blockly.Msg["ER_VAR_GET_TOOLTIP"] = "Get value of variable.";  // untranslated
Blockly.Msg["ER_VAR_SET_DESCRIPTION"] = "Set value of variable.</br>A variable is globally available in the program (including in sub functions) and can hold any data type available in the interface. </br>Variables and not persistent and values will not be remembers between to runs of the same program.";  // untranslated
Blockly.Msg["ER_VAR_SET_TITLE"] = "Set Variable";  // untranslated
Blockly.Msg["ER_VAR_SET_TOOLTIP"] = "Set value of variable";  // untranslated
Blockly.Msg["ER_WAIT_DESCRIPTION"] = "Wait for the specified time before continuing execution.";  // untranslated
Blockly.Msg["ER_WAIT_FOR_MIR_PLC_DESCRIPTION"] = "Waits for a change in MiR Register before exeucting code define in the block.</br>The purpose of this block is to have the program work as a slave of the MiR, which can control the execution using the registers.";  // untranslated
Blockly.Msg["ER_WAIT_FOR_MIR_PLC_TITLE"] = "Wait for Change in MiR Register";  // untranslated
Blockly.Msg["ER_WAIT_FOR_MIR_PLC_TOOLTIP"] = "Waits for a change in MiR Register before exeucting code define in the block";  // untranslated
Blockly.Msg["ER_WAIT_TITLE"] = "Wait";  // untranslated
Blockly.Msg["ER_WAIT_TOOLTIP"] = "Wait for defined time";  // untranslated
Blockly.Msg["ER_WAIT_UNTIL_DESCRIPTION"] = "Waits until a condition is met";  // untranslated
Blockly.Msg["ER_WAIT_UNTIL_TITLE"] = "Wait Until";  // untranslated
Blockly.Msg["ER_WAIT_UNTIL_TOOLTIP"] = "Wait until condition";  // untranslated
Blockly.Msg["ER_WAYPOINT_MANIPULATOR_DESCRIPTION"] = "The 'Manipulator Waypoint' can be set to tree diffrent types:</br>1) A set configuration, this is usefull to guarantee the robot returns to the same roations of the joints.</br>2) A position and orientation defined as a XYZ coordinate and a ZYX Euler rotation. The position and orientation is for a specified tool frames and defined relative to a reference frame. </br>3) A variable that can be both a configuation and a pose</br>For each waypoint the user can define a desired velocity and acceleration for the associated motion and a blend parameter. If no parameters are defined the waypoint will inherit the block from the parenting 'Move PTP' or 'Move Linear' block.";  // untranslated
Blockly.Msg["ER_WAYPOINT_MANIPULATOR_TITLE"] = "Manipulator Waypoint";  // untranslated
Blockly.Msg["ER_WAYPOINT_MANIPULATOR_TOOLTIP"] = "A postion/configuration for the manipulator to move to can either be a constant or a variable";  // untranslated
Blockly.Msg["ER_WAYPOINT_MOBILE_DESCRIPTION"] = "A waypoint (target postion) for the mobile platform can either be specified as a constant or a variable.";  // untranslated
Blockly.Msg["ER_WAYPOINT_MOBILE_TITLE"] = "Mobile Waypoint";  // untranslated
Blockly.Msg["ER_WAYPOINT_MOBILE_TOOLTIP"] = "Target postion for the Mobile platform.";  // untranslated
Blockly.Msg["ER_XYZRPY_DESCRIPTION"] = "Position and orientation of the specified tool in the selected reference frame.</br>Position are in meters.</br>Orientation specified as ZYX Euler Angles and measured in degrees.";  // untranslated
Blockly.Msg["ER_XYZRPY_TITLE"] = "Tool Configuration";  // untranslated
Blockly.Msg["ER_XYZRPY_TOOLTIP"] = "Position and orientation of the tool";  // untranslated
Blockly.Msg["EXPAND_ALL"] = "Gbasaa Ngọngọ";
Blockly.Msg["EXPAND_BLOCK"] = "Gbasaa Ngọngọ";
Blockly.Msg["EXTERNAL_INPUTS"] = "Ntinye Mpụta";
Blockly.Msg["HELP"] = "Enyemaka";
Blockly.Msg["INLINE_INPUTS"] = "Ntinye N'ahịrị";
Blockly.Msg["IOS_CANCEL"] = "Hapụ̀";
Blockly.Msg["IOS_ERROR"] = "Njehie";
Blockly.Msg["IOS_OK"] = "Ọ DỊ MMA";
Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Tinye ntinye";
Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Kwe ka okwu";
Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "Ọrụ a nwere ọnụọgụ abụọ.";
Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "NTINYE";
Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Tinye";
Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+ Tinye agbanwe";
Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Kpochapụ";
Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "Ị nweghị ike iji aha agbanwe dị n’efu.";
Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Nyegharịa aha";
Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Aha agbanwe";
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "mepụta ndepụta efu";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Weghachite ndepụta, nke ogologo 0, nke enweghị ndekọ data";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "ndepụta";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Tinye, wepu, ma ọ bụ megharia ngalaba iji haziearia ngọngọ ederede a.";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "mepụta ndepụta";
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Tinye ihe na ndepụta.";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "Mepụta ndepụta na nọmba ọ bụla.";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "mbu";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# site na njedebe";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_GET"] = "nweta";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "nweta ma wepu";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "ikpeazụ";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "nke ọ bụla";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "wepu";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Weghachitere ihe mbụ n'ime ndepụta.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Weghachitere ihe na ọnọdụ a kapịrị ọnụ na ndepụta.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Weghachitere ihe ikpeazụ n'ime ndepụta.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Weghachitere ihe ọbụla n'ime ndepụta.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Wepu ma weghachite ihe mbu na ndepụta.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Wepu ma weghachite ihe na ọnọdụ a kapịrị ọnụ na ndepụta.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Wepu ma weghachite ihe ikpeazụ n'ime ndepụta.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Wepu ma weghachite ihe ọbụla n'ime ndepụta.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Wepu ihe mbụ n'ime ndepụta.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Wepu ihe ahụ na ọnọdụ a kapịrị ọnụ na ndepụta.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Wepu ihe ikpeazụ n'ime ndepụta.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Wepu ihe ọbụla n'ime ndepụta.";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "rụọ # site na njedebe";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "rụọ #";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "rụọ na ngwụcha";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "nweta akụkụ ndepụta site na mbịdo";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "nweta akụkụ ndepụta site na # site na njedebe";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "nweta akụkụ ndepụta site na #";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Na-emepụta otu akụkụ a kapịrị ọnụ nke ndepụta.";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 bụ ihe ikpeazụ.";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 bụ ihe mbụ.";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "chọta ihe mbu nke ihe";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "chọta ihe ikpeazụ nke ihe";
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Weghachitere ntughari nke mbụ / nke ikpeazụ nke ihe dị na ndepụta. Weghachitere %1 ma ọ bụrụ na achọtaghị ihe.";
Blockly.Msg["LISTS_INLIST"] = "n’ime ndepụta";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 ghe oghe";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Weghachite eziokwu ma ọ bụrụ na ndepụta ahụ dị n’efu.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg["LISTS_LENGTH_TITLE"] = "ogo nke %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Weghachite ogo nke ndepụta.";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg["LISTS_REPEAT_TITLE"] = "mepụta ndepụta na ihe %1 emegharịrị ugboro %2";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Na-emepụta listi ndepụta gụnyere akara a nyere ya ugboro ugboro.";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";  // untranslated
Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "gbanwe %1";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Tụgharịa otu akụkụ ndepụta.";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "dị ka";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "tinye na";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "set";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Na-etinye ihe ahụ na mmalite nke ndepụta.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Na-etinye ihe na ọnọdụ a kapịrị ọnụ na ndepụta.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Na-etinye ihe ahụ na ngwụcha nke ndepụta.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Na-etinye ihe ahụ na ebe ọbụla nke ndepụta.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Debe ihe mbụ n'ime ndepụta.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Debe ihe ahụ na ọnọdụ a kapịrị ọnụ na ndepụta.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Debe ihe ikpeazụ n'ime ndepụta.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Debe ihe ọbụla n'ime ndepụta.";
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "arịgo";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "agbada";
Blockly.Msg["LISTS_SORT_TITLE"] = "hazie %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Tọọ otu akụkụ ndepụta ahụ.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "mkpụrụ edemede, leghara ọnọdụ anya";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "nọmba";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "mkpụrụ edemede";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "mee ndepụta site na ederede";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "mee ederede site na ndepụta";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Jikọọ ndepụta nke ederede gaa na otu ederede, nke oihe nkewa kewara.";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Kewaa ederede n'ime ndepụta nke ederede, na-agbasa na ihe nkwea ọ bụla.";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "na ihe nkewa";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "ụgha";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Weghachitere ezịọkwụ ma ọ bụ ụgha.";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "ezịọkwụ";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Weghachi ezịọkwụ ma ọ bụrụ na ntinye hatara onwe ha.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Weghachi ezịọkwụ ma ọ bụrụ na ntinye mbu dị ụkwụụ karia ntinye nke abụọ.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Weghachi ezịọkwụ ma ọ bụrụ na ntinye mbu dị ụkwụụ karia ma ọ bụ hatara ntinye nke abụọ.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Weghachi ezịọkwụ ma ọ bụrụ na ntinye mbu dị obere karia ntinye nke abụọ.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Weghachi ezịọkwụ ma ọ bụrụ na ntinye mbu dị obere karia ma ọ bụ hatara ntinye nke abụọ.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Weghachi ezịọkwụ ma ọ bụrụ na ntinye aghataghị onwe ha.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "ma ọ bụghị %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Weghachitere ezịọkwụ ma ọ bụrụ na ntinye bụ ụgha. Weghachitere ụgha ma ọ bụrụ na ntinye bụ ezịọkwụ.";
Blockly.Msg["LOGIC_NULL"] = "null";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Weghachitere nkịtị.";
Blockly.Msg["LOGIC_OPERATION_AND"] = "ma";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg["LOGIC_OPERATION_OR"] = "ma ọ bụrụ";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Weghachi ezịọkwụ ma ọ bụrụ na ntinye abụọ a bụ ezịọkwụ.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Weghachi ezịọkwụ ma ọ bụrụ na ọdịkarịa ala otu n’ime ntinye a bụ ezịọkwụ.";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "ule";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "ọ bụrụ ụgha";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "ọ bụrụ na eziokwu";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Lelee ọnọdụ na 'ule'. Ọ bụrụ na ọnọdụ ahụ bụ eziokwu, weghachitere akara 'ọ bụrụ na eziokwu’; ma ọ bụghị ya weghachitere akara 'ọ bụrụ ụgha'.";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";  // untranslated
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Weghachite ngụkọ ọnụ ọgụgụ abụọ ahụ.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Weghachite kwenye ọnụ ọgụgụ abụọ ahụ.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Weghachite nwepụ ọnụ ọgụgụ abụọ ahụ.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Weghachite mụbaa ọnụ ọgụgụ abụọ ahụ.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Weghachite nọmba mbu nke emeturu ike nke nọmba nke abụọ.";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";
Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 nke X:%1 Y:%2";
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Weghachite aktanjentị nke isi (X, Y) na ogo site na -180 rụọ 180.";
Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg["MATH_CHANGE_TITLE"] = "gbanwee %1 site na %2";
Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "Tinye nọmba na agbanwe '%1'.";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Weghachite otu n'ime kọnstant ndị nkịtị: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (infinity).";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "gbochịe %1 ala %2 elu %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Gbochịe ọnụọgụgụ dị n'etiti nọmba dị oke ala na nọmba dị oke elu (gụnyere).";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";  // untranslated
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "ga ekenwụ";
Blockly.Msg["MATH_IS_EVEN"] = "bụ ịvụn";
Blockly.Msg["MATH_IS_NEGATIVE"] = "bụ negetịf";
Blockly.Msg["MATH_IS_ODD"] = "bụ ọd";
Blockly.Msg["MATH_IS_POSITIVE"] = "bu posịtịf";
Blockly.Msg["MATH_IS_PRIME"] = "bụ praim";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Tụlee ma nọmba ọ bụ ịvụn, ọd, praim, zuru ezu, posịtịf, negetịf, ma e nwere nọmba ga ekenwu ya. Weghachitere eziokwu ma ọ bụ ụgha.";
Blockly.Msg["MATH_IS_WHOLE"] = "zuru ezu";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg["MATH_MODULO_TITLE"] = "ihe fọdụrụ nke %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Weghachite ihe fọdụrụ site na nkewa nọmba abụọ.";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";  // untranslated
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "Ọnụọgụgụ.";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";  // untranslated
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "agbaetiti nke ndepụta";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "ọkacha ukwuu nke ndepụta";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "etiti nke ndepụta";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "opekempe nke ndepụta";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "ụdị ndepụta";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "Ihe ọbụla nke ndepụta";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "ntughari usoro nke ndepụta";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "nchịkọta nke ndepụta";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Weghachite agbaetiti (nchịkọta mpụta) nke akara ọnụọgụ na ndepụta.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Weghachite nọmba kacha ukwuu na ndepụta.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Weghachite nọmba agbaetiti na ndepụta.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Weghachite nọmba kacha obere na ndepụta.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Weghachite ndepụta nke nke ihe kachasị mkpa na ndepụta.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Weghachite Ihe ọbụla site na ndepụta.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Weghachite ntughari usoro nke ndepụta.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Weghachite nchịkọta nke nọmba niile na ndepụta.";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";  // untranslated
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "nkewa ọbụla";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Weghachite ọnụọgụgụ ọbụla dị n'etiti 0.0 (gụnyere) na 1.0 (agụnyeghị).";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "ọnụọgụgụ ọbụla site na %1 rụọ %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Weghachite ọnụọgụgụ ọbụla dị n'etiti ihe abụọ a kapịrị ọnụ, agụnyere.";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "gbaarịa";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "gbatụọ ala";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "gbaago elu";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Gbaago nọmba n'elu ma ọ bụ ala.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "ozụzụ";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "Isi ngụkọ";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Weghachite akara ozụzụ nke nọmba.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Weghachite na ike nke nọmba.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Weghachite lọgarịdịm nke di na nọmba.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Weghachite isi lọgarịdịm 10 nke nọmba.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Weghachite njụ nke nọmba.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Weghachite 10 na ike nke nọmba.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Weghachite Isi ngụkọ nke nọmba.";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";  // untranslated
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";  // untranslated
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";  // untranslated
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";  // untranslated
Blockly.Msg["MATH_TRIG_COS"] = "cos";  // untranslated
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://en.wikipedia.org/wiki/Trigonometric_functions";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";  // untranslated
Blockly.Msg["MATH_TRIG_TAN"] = "tan";  // untranslated
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Weghachite akosaịn nke nọmba.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Weghachite aksaịn nke nọmba.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Weghachite aktanjentị nke nọmba.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Weghachite kosaịn nke ogo (ọ bụghị redian).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Weghachite saịn nke ogo (ọ bụghị redian).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Weghachite tanjentị nke ogo (ọ bụghị redian).";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Mepụta agba agbanwe...";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Mepụta nọmba agbanwe...";
Blockly.Msg["NEW_STRING_VARIABLE"] = "Mepụta njikọ agbanwe...";
Blockly.Msg["NEW_VARIABLE"] = "Mepụta agbanwe...";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "Aha agbanwe ọhụụ:";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "Ụdị agbanwe ọhụụ:";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";  // untranslated
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "kwe ka okwu";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "na:";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Gbaa ọrụ a kọwaa onye-ọrụ '%1'.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Gbaa ọrụ a kọwaa onye-ọrụ '%1' ma jiri mmepụta ya.";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "na:";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Mepụta '%1'";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Kọwaa ọrụ a...";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";  // untranslated
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "megharịa";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "ga na";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Na emepụta ọrụ na-enweghị mmepụta.";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "weghachite";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Na emepụta ọrụ nwere mmepụta.";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Ịdọ aka ná ntị: Ọrụ a nwere ọnụọgụ abụọ.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Nkọwapụta njirimara ọrụ";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "Weghachite akara nke agbanwe a.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Ịdọ aka ná ntị: Ọrụ a nwere ọnụọgụ abụọ.";
Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "tinye aha:";
Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Tinye ntinye aka na ọrụ ahụ.";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "ntinye";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Tinye, wepu, ma ọ bụ tugharịa ntinye na ọrụ a.";
Blockly.Msg["REDO"] = "Megharịa";
Blockly.Msg["REMOVE_COMMENT"] = "Wepu okwu";
Blockly.Msg["RENAME_VARIABLE"] = "Nyegharịa agbanwe aha...";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Nyegharịa agbanwe '%1' nille ga:";
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_APPEND_TITLE"] = "iji %1 tinye ederede %2";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Tinye ederede na mgbanwee '%1'.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "na ahịrị elu";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "na Aha Ahịrị";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "na AHỊRỊ ELU";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "AA <-> aa";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "nweta akwụkwọ ozi mbu";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "nweta akwụkwọ ozi # site na njedebe";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "nweta akwụkwọ ozi #";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg["TEXT_CHARAT_LAST"] = "nweta akwụkwọ ozi ikpeazụ";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "nweta akwụkwọ ozi ọbụla";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";  // untranslated
Blockly.Msg["TEXT_CHARAT_TITLE"] = "chọta na ederede %1 %2";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Weghachite akwụkwọ ozi ahụ na ọnọdụ a kapịrị ọnụ.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";  // untranslated
Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "gụọ %1 n’ime %2";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Gụọ ugboro ole ụfọdụ ederede na’apụta n’ụfọdụ ederede ọzọ.";
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Tinye ihe na ederede.";
Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "jikọta";
Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "Tinye, wepu, ma ọ bụ megharia ngalaba iji haziearia ngọngọ ederede a.";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "na akwụkwọ ozi # site na njedebe";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "na akwụkwọ ozi #";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "na leta ikpeazụ";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "chọta na ederede";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "nweta njịkọ-ala na akwụkwọ ozi mbu";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "nweta njịkọ-ala na akwụkwọ ozi # site na njedebe";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "nweta njịkọ-ala na akwụkwọ ozi #";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Weghachite akụkụ nke akọwapụtara ederede.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "chọta ihe omume mbu nke ederede";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "chọta ihe omume ikpeazụ nke ederede";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "chọta na ederede %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Weghachitere ntughari nke mbụ / nke ikpeazụ nke ihe dị na ndepụta. Weghachitere %1 ma ọ bụrụ na achọtaghị ihe.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 di n’efu";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Weghachitere ezịọkwụ ma ọ bụrụ na ederede enyere di n’efu.";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "mepụta ederede na";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Mepụta otu ederede site na ijikọta ọnụ ọgụgụ ihe ọ bụla.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_LENGTH_TITLE"] = "ogologo nke %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Weghachitere nọmba nke akwụkwọ ozi (gụnyere oghere) na ederede enyere.";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg["TEXT_PRINT_TITLE"] = "bipụta %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Bipụta ederede a kapịrị ọnụ, nọmba ma ọ bụ akara ọzọ.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Mepụta ngwa onye ọrụ maka nọmba.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Mepụta ngwa onye ọrụ maka ederede.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "Mepụta ngwa maka maka nọmba na ozi";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "Mepụta ngwa maka iji ederede na ozi";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";  // untranslated
Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "dochie %1 na %2 n’ime %3";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Dochie ihe omuma nke ederede ufodu n'ime ufodu ederede ozo.";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";  // untranslated
Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "gbanwe %1";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Na-agbanwe iwu nke ndị odide na ederede.";
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "Akwụkwọ ozi, okwu, ma ọ bụ akara ederede.";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "belata oghere dị mkpụmkpụ si n'akụkụ abụọ nke";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "belata oghere dị mkpụmkpụ si n'akụkụ aka ịkpa nke";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "belata oghere dị mkpụmkpụ si n'akụkụ aka nrị nke";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Weghachite otu ederede ya na oghere ọzọ wepụrụ site n'otu ma ọ bụ akụkụ mechị abụọ.";
Blockly.Msg["TODAY"] = "Taa";
Blockly.Msg["UNDO"] = "Me la àzụ";
Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "ihe";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Mepụta 'dozie %1'";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Weghachite akara nke agbanwe a.";
Blockly.Msg["VARIABLES_SET"] = "dozie %1 ga na %2";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Mepụta 'nweta uru %1'";
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Debe mgbanwe a ka ọ ghata ihe ntinye.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "Agbanwe akpọrọ '%1' dị adị.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "Agbanwe akpọrọ '%1' dị adị na ụdị ozo: '%2'.";
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Kwuo ihe ọ bụla...";
Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];

Blockly.Msg["MATH_HUE"] = "230";
Blockly.Msg["LOOPS_HUE"] = "120";
Blockly.Msg["LISTS_HUE"] = "260";
Blockly.Msg["LOGIC_HUE"] = "210";
Blockly.Msg["VARIABLES_HUE"] = "330";
Blockly.Msg["TEXTS_HUE"] = "160";
Blockly.Msg["PROCEDURES_HUE"] = "290";
Blockly.Msg["COLOUR_HUE"] = "20";
Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "310";