// This file was automatically generated.  Do not modify.

'use strict';

Blockly.Msg["ADD_COMMENT"] = "Palikti komentarą";
Blockly.Msg["BARCODE_DETECTOR_DESCRIPTION"] = "Detect a barcode, and save the data in a variable. </br>Supports EAN/UPC, Code 128, Code 39, Interleaved 2 of 5 and QR Codes.</br>To detect a barcode it is important that the barcode or QR codes is well within view of the camera and the smallest features of the code has a detectable size in the image.</br>The value of the barcode/QR code is stored as a string.";  // untranslated
Blockly.Msg["BARCODE_DETECTOR_TITLE"] = "Barcode Detection";  // untranslated
Blockly.Msg["BARCODE_DETECTOR_TOOLTIP"] = "Detect a barcode and save the data in a variable";  // untranslated
Blockly.Msg["CALIBRATE_TO_MARKER_DESCRIPTION"] = "Visual markers can be used to define local reference frames in the environment. To specify a reference based on a marker, first ensure that the marker is within view of the camera. Then do:</br>1) Specify the type of marker to calibrate to and the reference frame to use.</br>2) Press 'Calibrate To Marker' to store the calibration.</br>If the marker is correctly found the block will change from uninitialized (showing yellow warning triangle) to initialized. </br>When running the program the robot will detect the marker and update the reference. This way the robot can compensate for uncertainties cause by the mobile platform and reach targets relative to the market with high accuracy.</br>If the market cannot be detected the instruction will promt the user (generate popup in the user interface) where the user can ask to retry or cancel execution.";  // untranslated
Blockly.Msg["CALIBRATE_TO_MARKER_TITLE"] = "Calibrate to Marker";  // untranslated
Blockly.Msg["CALIBRATE_TO_MARKER_TOOLTIP"] = "Calibrate to a visual marker";  // untranslated
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Negalima ištrinti kintamojo '%1', nes jis yra dalis funkcijos '%2'";
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Keisti reikšmę:";
Blockly.Msg["CLEAN_UP"] = "Išvalyti blokus";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Collapsed blocks contain warnings.";  // untranslated
Blockly.Msg["COLLAPSE_ALL"] = "Suskleisti blokus";
Blockly.Msg["COLLAPSE_BLOCK"] = "Suskleisti bloką";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "1 spalva";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "2 spalva";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
Blockly.Msg["COLOUR_BLEND_RATIO"] = "santykis";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "sumaišyk";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Sumaišo dvi spalvas su pateiktu santykiu (0.0 - 1.0).";
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://lt.wikipedia.org/wiki/Spalva";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Pasirinkti spalvą iš paletės.";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "atsitiktinė spalva";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Pasirinkti spalvą atsitiktinai.";
Blockly.Msg["COLOUR_RGB_BLUE"] = "mėlyna";
Blockly.Msg["COLOUR_RGB_GREEN"] = "žalia";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "http://www.december.com/html/spec/colorper.html";  // untranslated
Blockly.Msg["COLOUR_RGB_RED"] = "raudona";
Blockly.Msg["COLOUR_RGB_TITLE"] = "spalva su";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Spalvą galima sudaryti iš raudonos, žalios ir mėlynos dedamųjų. Kiekvienos intensyvumas nuo 0 iki 100.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "nutraukti kartojimą";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "šį kartą praleisti likusius veiksmus ir tęsti kartojimą";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Nutraukia (artimiausią) vykstantį kartojimą.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Praleidžia žemiau išvardintus kartojimo veiksmus (ir tęsia darbą nuo kartojimo pradinio veiksmo).";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Atsargiai: šis blokas gali būt naudojamas tik kartojimo bloko viduje.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "kartok su kiekvienu %1 iš sąrašo %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "Kartok veiksmus, kol kintamasis \"%1\" paeiliui gauna kiekvieną sąrašo reikšmę.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg["CONTROLS_FOR_TITLE"] = "kartok, kai %1 kinta nuo %2 iki %3 po %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Imama kintamoji '%1' reikšmė nuo pradinio skaičiaus iki pabaigos skaičiaus, skaičiuojant nustatytais intervalais ir atliekant nustatytus blokus.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Pridėti sąlygą „jei“ blokui.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Pridėti veiksmų vykdymo variantą/\"šaką\", kai netenkinama nė viena sąlyga.";
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Galite pridėt/pašalinti/pertvarkyti  sąlygų \"šakas\".";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "kitu atveju";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "arba jei";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "jei";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "Jeigu sąlyga tenkinama, tai atlik veiksmus.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "Jei sąlyga tenkinama, atlikti jai priklausančius veiksmus, o jei ne -- atlikti kitus nurodytus veiksmus.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "Jei pirma sąlyga tenkinama, atlikti jai priklausančius veiksmus, O jei ne, tikrinti antrą sąlygą -- ir jei ši tenkinama, atlikti jos veiksmus.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "Jei pirma sąlyga tenkinama, atlikti jai priklausančius veiksmus, O jei ne, tikrinti antrą sąlygą -- ir jei ši tenkinama, atlikti jos veiksmus. Kitais atvejais -- atlikti paskutinio bloko veiksmus.";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "daryti";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "pakartokite %1 kartus";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Leidžia atlikti išvardintus veiksmus kelis kartus.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "kartok, kol pasieksi";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "kartok kol";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Kartoja veiksmus, kol bus pasiekta nurodyta sąlyga.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Kartoja veiksmus, kol sąlyga tenkinama.";
Blockly.Msg["DELETE_ALL_BLOCKS"] = "Ištrinti visus %1 blokus?";
Blockly.Msg["DELETE_BLOCK"] = "Ištrinti bloką";
Blockly.Msg["DELETE_VARIABLE"] = "Ištrinti „%1“ kintamąjį";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "Ištrinti %1 '%2' panaudojimus?";
Blockly.Msg["DELETE_X_BLOCKS"] = "Ištrinti %1 blokus";
Blockly.Msg["DISABLE_BLOCK"] = "Išjungti bloką";
Blockly.Msg["DUPLICATE_BLOCK"] = "Kopijuoti";
Blockly.Msg["DUPLICATE_COMMENT"] = "Dubliuoti Komentarą";
Blockly.Msg["ENABLE_BLOCK"] = "Įjungti bloką";
Blockly.Msg["ER_ANALOG_IO_VALUE_DESCRIPTION"] = "Get value of analog IO.</br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box. </br>2) Select which of the IO Pins to read</br>Supports both getting the values of inputs and accessing values of outputs.</br>The value is return as a number.";  // untranslated
Blockly.Msg["ER_ANALOG_IO_VALUE_TITLE"] = "Analog IO";  // untranslated
Blockly.Msg["ER_ANALOG_IO_VALUE_TOOLTIP"] = "Value of Analog IO";  // untranslated
Blockly.Msg["ER_ARRAY_DESCRIPTION"] = "Array of numbers.</br>The size of the array can be extended and reduced selecting Add or Remove Element. Elements are alway appended to and removed from the back of the list.";  // untranslated
Blockly.Msg["ER_ARRAY_TITLE"] = "Array";  // untranslated
Blockly.Msg["ER_ARRAY_TOOLTIP"] = "Array of numbers";  // untranslated
Blockly.Msg["ER_BATTERY_POWER_PERCENTAGE_DESCRIPTION"] = "Value for remaining battery power in percentages.</br>The value if of type number";  // untranslated
Blockly.Msg["ER_BATTERY_POWER_PERCENTAGE_TITLE"] = "Battery Power Percentage";  // untranslated
Blockly.Msg["ER_BATTERY_POWER_PERCENTAGE_TOOLTIP"] = "Remaining battery power in percentages";  // untranslated
Blockly.Msg["ER_BOXPATTERN_DESCRIPTION"] = "Defines a set of positions in a box shaped (rectanglar) pattern";  // untranslated
Blockly.Msg["ER_BOXPATTERN_TITLE"] = "Box Pattern";  // untranslated
Blockly.Msg["ER_BOXPATTERN_TOOLTIP"] = "Defines box shaped (rectangular) pattern";  // untranslated
Blockly.Msg["ER_CALL_FUNCTION_BLOCK_DESCRIPTION"] = "Executes the instructions defined in a 'Function Block'";  // untranslated
Blockly.Msg["ER_CALL_FUNCTION_BLOCK_TITLE"] = "Call Function Block";  // untranslated
Blockly.Msg["ER_CALL_FUNCTION_BLOCK_TOOLTIP"] = "Call Function Block";  // untranslated
Blockly.Msg["ER_CONTROLS_IF_DESCRIPTION"] = "If construct with optional 'else if' and 'else'.</br>The 'If' block branches based on whether the specified condition is true or false. The condition needs to evaluate to a boolean type.</br>The 'If' block can be reconfigured to include a number of 'else if' constructs and/or an 'else' construct by clicking the small gear in the top left corner of the block.";  // untranslated
Blockly.Msg["ER_CONTROLS_IF_TITLE"] = "If";  // untranslated
Blockly.Msg["ER_CONTROLS_IF_TOOLTIP"] = "If construct with optional 'else if' and 'else'";  // untranslated
Blockly.Msg["ER_CONTROLS_REPEAT_DESCRIPTION"] = "Repeats the instructions in the body of the block the specified number of times.";  // untranslated
Blockly.Msg["ER_CONTROLS_REPEAT_TITLE"] = "Repeat";  // untranslated
Blockly.Msg["ER_CONTROLS_REPEAT_TOOLTIP"] = "Repeats a set of instruction a number of times";  // untranslated
Blockly.Msg["ER_CONTROLS_WHILE_DESCRIPTION"] = "Repeats the instructions in the body of the block until until the specified condtion is met";  // untranslated
Blockly.Msg["ER_CONTROLS_WHILE_TITLE"] = "While";  // untranslated
Blockly.Msg["ER_CONTROLS_WHILE_TOOLTIP"] = "Repeats a set of instructions untill a condtion is met";  // untranslated
Blockly.Msg["ER_DEFINE_REFERENCE_DESCRIPTION"] = "Updates the value of a reference.</br>When a reference is updated all motions relative to this reference will be relative to the new values.</br>This block enables to reuse same movements in a number of different locations. For instance, if having to execute the same assembly sequence in four locations, the movements can be programmed relative to a reference and only the reference will have to be updated for the four different locations.";  // untranslated
Blockly.Msg["ER_DEFINE_REFERENCE_TITLE"] = "Set a Reference";  // untranslated
Blockly.Msg["ER_DEFINE_REFERENCE_TOOLTIP"] = "Updates value of a reference";  // untranslated
Blockly.Msg["ER_DIG_IO_VALUE_DESCRIPTION"] = "Get value of digital IO.</br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box. </br>2) Select which of the IO Pins to read</br>Supports both getting the values of inputs and accessing values of outputs.</br>The value is return as a boolean.";  // untranslated
Blockly.Msg["ER_DIG_IO_VALUE_TITLE"] = "Digital IO";  // untranslated
Blockly.Msg["ER_DIG_IO_VALUE_TOOLTIP"] = "Value of Digital IO";  // untranslated
Blockly.Msg["ER_DRIVE_TO_CHARGING_STATION_DESCRIPTION"] = "Drive to the specified charging station and start charging.</br>Charging stations are defined within the map of the MiR. Consult the user manual for details on how ot define a charging station.";  // untranslated
Blockly.Msg["ER_DRIVE_TO_CHARGING_STATION_TITLE"] = "Drive to Charging Station";  // untranslated
Blockly.Msg["ER_DRIVE_TO_CHARGING_STATION_TOOLTIP"] = "Drive to the specified charging station and start charging";  // untranslated
Blockly.Msg["ER_DRIVE_TO_COORDINATES_DESCRIPTION"] = "Drive to the waypoints defined in the body of the instruction.";  // untranslated
Blockly.Msg["ER_DRIVE_TO_COORDINATES_TITLE"] = "Drive to Waypoints";  // untranslated
Blockly.Msg["ER_DRIVE_TO_COORDINATES_TOOLTIP"] = "Drive to the waypoints defined in the body of the instruction";  // untranslated
Blockly.Msg["ER_DRIVE_TO_DEFINED_POSITION_DESCRIPTION"] = "Positions can be defined directly in the map of the mobile robot and selected as targets using the 'Drive to Position' block.";  // untranslated
Blockly.Msg["ER_DRIVE_TO_DEFINED_POSITION_TITLE"] = "Drive to Position";  // untranslated
Blockly.Msg["ER_DRIVE_TO_DEFINED_POSITION_TOOLTIP"] = "Drive to a named position defined for the mobile robot";  // untranslated
Blockly.Msg["ER_EXIT_DESCRIPTION"] = "Exits the program being executed.</br>Can be used if the program needs to stop given a certain condition. For instance if there are no objects/markers detected.";  // untranslated
Blockly.Msg["ER_EXIT_TITLE"] = "Exit";  // untranslated
Blockly.Msg["ER_EXIT_TOOLTIP"] = "When called stops the program";  // untranslated
Blockly.Msg["ER_FORCE_ALIGN_DESCRIPTION"] = "The 'Force Align' block moves in a specified direction (defined with direction vector in given reference frame) until in contact with an object. When reaching contact it aligns the object to the surface using an impedance control.";  // untranslated
Blockly.Msg["ER_FORCE_ALIGN_TITLE"] = "Force Align";  // untranslated
Blockly.Msg["ER_FORCE_ALIGN_TOOLTIP"] = "Aligns to a surface using force/torque sensor.";  // untranslated
Blockly.Msg["ER_FUNCTION_BLOCK_DESCRIPTION"] = "Defines a sequence of instructions which can be called as a function.</br>The instrutions of the 'Function Block' is called as if they where inlined in the sequence of the caller.</br>Variables are therefore not subject to scope.";  // untranslated
Blockly.Msg["ER_FUNCTION_BLOCK_TITLE"] = "Function Block";  // untranslated
Blockly.Msg["ER_FUNCTION_BLOCK_TOOLTIP"] = "Defines a function that can be called multile times from the main program";  // untranslated
Blockly.Msg["ER_GRIPPER_MOVEQ_DESCRIPTION"] = "Open/close gripper to specified configuration";  // untranslated
Blockly.Msg["ER_GRIPPER_MOVEQ_TITLE"] = "Gripper Open/Close";  // untranslated
Blockly.Msg["ER_GRIPPER_MOVEQ_TOOLTIP"] = "Gripper Open/Close";  // untranslated
Blockly.Msg["ER_IS_TIME_DESCRIPTION"] = "Compares the current time with a set time.</br>The block support checking if time is equal, not equal, less than, less than or equal, greater than or greater than or equal.</br>Time is compared based on hours and minutes. ";  // untranslated
Blockly.Msg["ER_IS_TIME_TITLE"] = "Compares the Time";  // untranslated
Blockly.Msg["ER_IS_TIME_TOOLTIP"] = "Compares the current time with a set time";  // untranslated
Blockly.Msg["ER_LOGIC_BOOLEAN_DESCRIPTION"] = "Boolean block, set to either true or false";  // untranslated
Blockly.Msg["ER_LOGIC_BOOLEAN_TITLE"] = "Boolean";  // untranslated
Blockly.Msg["ER_LOGIC_BOOLEAN_TOOLTIP"] = "Boolean, either true or false";  // untranslated
Blockly.Msg["ER_LOGIC_COMPARE_DESCRIPTION"] = "Performs a logic comparison of two values.</br>Select which type of comparison to perform.</br>Assumes that the left and right hand sides of the comparison has identical data types. If the data types and incompatible the compare operator throws an exception. The exception can be caught using the 'Try Catch' construct. Failing to catch the exception will cause the program to halt.";  // untranslated
Blockly.Msg["ER_LOGIC_COMPARE_TITLE"] = "Compare";  // untranslated
Blockly.Msg["ER_LOGIC_COMPARE_TOOLTIP"] = "Logical comparison";  // untranslated
Blockly.Msg["ER_LOGIC_NEGATE_DESCRIPTION"] = "Negates boolean value.</br>The block only accepts values of boolean type. If needed to regate the value of a variable you need to create a logical comparison to extract the value of the variable.";  // untranslated
Blockly.Msg["ER_LOGIC_NEGATE_TITLE"] = "Negates Boolean Value";  // untranslated
Blockly.Msg["ER_LOGIC_NEGATE_TOOLTIP"] = "Negates boolean value";  // untranslated
Blockly.Msg["ER_LOGIC_OPERATION_DESCRIPTION"] = "Performs a logic operation of two boolean expression.</br>Select which type of operation to perform. The type can be logic 'and' or 'or'.</br>If the right and left hand sides of the expression do not evaluate to boolean expressions the operation throws an exception. The exception can be caught using the 'Try Catch' construct. Failing to catch the exception will cause the program to halt.";  // untranslated
Blockly.Msg["ER_LOGIC_OPERATION_TITLE"] = "Logic Operation";  // untranslated
Blockly.Msg["ER_LOGIC_OPERATION_TOOLTIP"] = "Logic Operation";  // untranslated
Blockly.Msg["ER_MATH_DESCRIPTION"] = "Provides functionality for adding, subtracting, multiplying and dividing.</br>If adding numbers or boolean with a string, the result becomes a string.</br>If the expressions do not valuate to numbers the operation throws an exception. The exception can be caught using the 'Try Catch' construct. Failing to catch the exception will cause the program to halt.";  // untranslated
Blockly.Msg["ER_MATH_NUMBER_DESCRIPTION"] = "Number value.</br>Numbers are represented a floating point values with double precision.";  // untranslated
Blockly.Msg["ER_MATH_NUMBER_TITLE"] = "Number";  // untranslated
Blockly.Msg["ER_MATH_NUMBER_TOOLTIP"] = "Number value";  // untranslated
Blockly.Msg["ER_MATH_TITLE"] = "Number Operation";  // untranslated
Blockly.Msg["ER_MATH_TOOLTIP"] = "Basic mathematical +,-,*,/ operations";  // untranslated
Blockly.Msg["ER_MIR_COORDINATES_DESCRIPTION"] = "Position (X, Y) in meter and orientation (Angle) in degrees. </br>Positions are relative to the internal map of the mobile robot. This reference is defined as the World frame.";  // untranslated
Blockly.Msg["ER_MIR_COORDINATES_TITLE"] = "Position";  // untranslated
Blockly.Msg["ER_MIR_COORDINATES_TOOLTIP"] = "Position (X, Y) in meter and orientation (Angle) in degrees";  // untranslated
Blockly.Msg["ER_MIR_MISSIONS_DESCRIPTION"] = "Missions defined in the MiR can be called using the 'Execute MiR Mission' block. Execution a mission blocks the program unil the execution of the MiR mission is finished.</br>This functionality is intended to enable user to define subprograms as mission within the MiR making advanced functionality (e.g. operating elevators) available.";  // untranslated
Blockly.Msg["ER_MIR_MISSIONS_TITLE"] = "Execute MiR Mission";  // untranslated
Blockly.Msg["ER_MIR_MISSIONS_TOOLTIP"] = "Executes a MiR mission from the MiR interface";  // untranslated
Blockly.Msg["ER_PALLETIZE_DESCRIPTION"] = "The 'Palletize' block runs a sequence of instruction for the specified amount locations specified in a pattern.</br>If a pattern is shared as a variable among multiple 'Palletize' blocks the pattern will keep track of the next location to apply.";  // untranslated
Blockly.Msg["ER_PALLETIZE_TITLE"] = "Palletize";  // untranslated
Blockly.Msg["ER_PALLETIZE_TOOLTIP"] = "Runs a sequence of instructions in a given pattern";  // untranslated
Blockly.Msg["ER_POPUP_DESCRIPTION"] = "Generated Popup message for the user. </br>The user can select to confirm with and Ok or Cancel. The result is stored as a boolean in a variable, where Ok is true and Cancel is false. This variable can later be used to branch the program based on the user input.";  // untranslated
Blockly.Msg["ER_POPUP_TITLE"] = "Popup";  // untranslated
Blockly.Msg["ER_POPUP_TOOLTIP"] = "Popup message with true/false return value";  // untranslated
Blockly.Msg["ER_PROGRAM_DESCRIPTION"] = "Defines program to be executed. </br>This block is mandatory and exactly one block will always exist.";  // untranslated
Blockly.Msg["ER_PROGRAM_TITLE"] = "Program";  // untranslated
Blockly.Msg["ER_PROGRAM_TOOLTIP"] = "Defines program to be executed";  // untranslated
Blockly.Msg["ER_Q_DESCRIPTION"] = "Configuration of the robot arm specified by joint angles. All angles specified in degrees.";  // untranslated
Blockly.Msg["ER_Q_TITLE"] = "Joint Configuration";  // untranslated
Blockly.Msg["ER_Q_TOOLTIP"] = "Configuration of the robot arm specified by joint angles. All angles specified in degrees.";  // untranslated
Blockly.Msg["ER_SET_ANALOG_OUTPUT_DESCRIPTION"] = "Set value of analog output.</br></br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box. </br>2) Select which of the IO Pins to set</br>3) Select the value";  // untranslated
Blockly.Msg["ER_SET_ANALOG_OUTPUT_TITLE"] = "Set Analog Output";  // untranslated
Blockly.Msg["ER_SET_ANALOG_OUTPUT_TOOLTIP"] = "Set value of analog output";  // untranslated
Blockly.Msg["ER_SET_DIGITAL_OUTPUT_DESCRIPTION"] = "Set value of digital output.</br></br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box</br>2) Select which of the IO Pins to set</br>3) Select the value.";  // untranslated
Blockly.Msg["ER_SET_DIGITAL_OUTPUT_TITLE"] = "Set Digital Output";  // untranslated
Blockly.Msg["ER_SET_DIGITAL_OUTPUT_TOOLTIP"] = "Set value of digital output";  // untranslated
Blockly.Msg["ER_SET_PAYLOAD_DESCRIPTION"] = "To set the payload of the arm two parameters needs to be given. <br/> 1) The actual payload measured in kg and <br/>2) The position [x,y,z] (in meters) of the Center of Mass (CoM) of the payload. The position is to be measured relative to the toolmount frame and NOT the  TCP frame.";  // untranslated
Blockly.Msg["ER_SET_PAYLOAD_TITLE"] = "Set Payload";  // untranslated
Blockly.Msg["ER_SET_PAYLOAD_TOOLTIP"] = "Set the payload of the arm";  // untranslated
Blockly.Msg["ER_SET_TCP_DESCRIPTION"] = "Sets the transformation between the tool flange (the end) of the robot arm and the actual TCP. <br/> Changing the TCP in the program will offset all movements specified relative to the TCP. Movements specified in joint angles will not be impacted.";  // untranslated
Blockly.Msg["ER_SET_TCP_TITLE"] = "Set TCP";  // untranslated
Blockly.Msg["ER_SET_TCP_TOOLTIP"] = "Set the TCP of the robot";  // untranslated
Blockly.Msg["ER_STRING_DESCRIPTION"] = "String value";  // untranslated
Blockly.Msg["ER_STRING_TITLE"] = "String";  // untranslated
Blockly.Msg["ER_STRING_TOOLTIP"] = "String value";  // untranslated
Blockly.Msg["ER_THROW_DESCRIPTION"] = "Throws an exception (error message), which can be caught by the Try-Catch block.</br>If the exception is not caught it will cause the program to halt.";  // untranslated
Blockly.Msg["ER_THROW_TITLE"] = "Throw";  // untranslated
Blockly.Msg["ER_THROW_TOOLTIP"] = "Throws an error message.";  // untranslated
Blockly.Msg["ER_TRY_CATCH_DESCRIPTION"] = "'Try Catch' structure enabling catching exceptions (errors) produced by the instructions in the Try section.</br>Only if an error is triggered the instructions specified within the Catch section is executed. Use the Catch section to handle the errors.";  // untranslated
Blockly.Msg["ER_TRY_CATCH_TITLE"] = "Try Catch";  // untranslated
Blockly.Msg["ER_TRY_CATCH_TOOLTIP"] = "Try Catch structure";  // untranslated
Blockly.Msg["ER_UR_ACTION_DESCRIPTION"] = "Execute the specified event on the UR.</br>The name of the event shall match the name of an 'EventNode' specific under the ER-Ability node in the UR Polyscope interface.</br>Parameters allows passing up to 20 numbers to the event. The parameters will be available as a list variable in the UR Polyscope interface.";  // untranslated
Blockly.Msg["ER_UR_ACTION_TITLE"] = "Execute Event on UR";  // untranslated
Blockly.Msg["ER_UR_ACTION_TOOLTIP"] = "Execute the specified event on the UR";  // untranslated
Blockly.Msg["ER_UR_GOTO_DESCRIPTION"] = "Move robot in joint-space.</br>Joint-space motions gives the shortest travel by the motors in the joint. However, the tools of the robot will not move in a straight line.</br>The motion is defined by the set of specified way points.</br>Associated to a 'Move PTP' block are parameters for the maximum velocity and acceleration and blend distance. There parameters are the default settings for moving between waypoints, but can be overridden in the individual waypoints.";  // untranslated
Blockly.Msg["ER_UR_GOTO_LIN_DESCRIPTION"] = "Move robot linear in tool space.</br>Linear motions in the tool space results in straight line movements of the tool. </br>The motion is defined by the set of specified way points.</br>Associated to a 'Move Linear' block are parameters for the maximum velocity and acceleration and blend distance. There parameters are the default settings for moving between waypoints, but can be overridden in the individual waypoints.";  // untranslated
Blockly.Msg["ER_UR_GOTO_LIN_TITLE"] = "Move Linear";  // untranslated
Blockly.Msg["ER_UR_GOTO_LIN_TOOLTIP"] = "Move robot linear in tool space";  // untranslated
Blockly.Msg["ER_UR_GOTO_TITLE"] = "Move PTP";  // untranslated
Blockly.Msg["ER_UR_GOTO_TOOLTIP"] = "Move robot in joint-space";  // untranslated
Blockly.Msg["ER_UR_MOVE_REL_DESCRIPTION"] = "Executes a number of relative motions defined within the body of the block.";  // untranslated
Blockly.Msg["ER_UR_MOVE_REL_TITLE"] = "Move Relative";  // untranslated
Blockly.Msg["ER_UR_MOVE_REL_TOOLTIP"] = "Executes a number of relative motions";  // untranslated
Blockly.Msg["ER_UR_REL_MOTION_DESCRIPTION"] = "A relative motion can either be defined as:</br>1) A movement between to define waypoints</br>2) A direction (in 6D) where the length of the direction vector defines the distance to move.";  // untranslated
Blockly.Msg["ER_UR_REL_MOTION_TITLE"] = "Relative Motion";  // untranslated
Blockly.Msg["ER_UR_REL_MOTION_TOOLTIP"] = "Relative Motion";  // untranslated
Blockly.Msg["ER_UVC_SWEEP_DESCRIPTION"] = "Moves in a sweeping motion following the waypoints define in the block";  // untranslated
Blockly.Msg["ER_UVC_SWEEP_TITLE"] = "UVC sweep";  // untranslated
Blockly.Msg["ER_UVC_SWEEP_TOOLTIP"] = "Powers on the UVC lamp and sweeps across a definde area with a set speed";  // untranslated
Blockly.Msg["ER_VAR_GET_DESCRIPTION"] = "Get value of variable.</br>A variable is globally available in the program (including in sub functions) and can hold any data type available in the interface. </br>Variables and not persistent and values will not be remembers between to runs of the same program. A variables thus needs to be Set before it can be accessed. </br>Trying to get the value of a variable not yet defined results in an exception.";  // untranslated
Blockly.Msg["ER_VAR_GET_TITLE"] = "Get variable.";  // untranslated
Blockly.Msg["ER_VAR_GET_TOOLTIP"] = "Get value of variable.";  // untranslated
Blockly.Msg["ER_VAR_SET_DESCRIPTION"] = "Set value of variable.</br>A variable is globally available in the program (including in sub functions) and can hold any data type available in the interface. </br>Variables and not persistent and values will not be remembers between to runs of the same program.";  // untranslated
Blockly.Msg["ER_VAR_SET_TITLE"] = "Set Variable";  // untranslated
Blockly.Msg["ER_VAR_SET_TOOLTIP"] = "Set value of variable";  // untranslated
Blockly.Msg["ER_WAIT_DESCRIPTION"] = "Wait for the specified time before continuing execution.";  // untranslated
Blockly.Msg["ER_WAIT_FOR_MIR_PLC_DESCRIPTION"] = "Waits for a change in MiR Register before exeucting code define in the block.</br>The purpose of this block is to have the program work as a slave of the MiR, which can control the execution using the registers.";  // untranslated
Blockly.Msg["ER_WAIT_FOR_MIR_PLC_TITLE"] = "Wait for Change in MiR Register";  // untranslated
Blockly.Msg["ER_WAIT_FOR_MIR_PLC_TOOLTIP"] = "Waits for a change in MiR Register before exeucting code define in the block";  // untranslated
Blockly.Msg["ER_WAIT_TITLE"] = "Wait";  // untranslated
Blockly.Msg["ER_WAIT_TOOLTIP"] = "Wait for defined time";  // untranslated
Blockly.Msg["ER_WAIT_UNTIL_DESCRIPTION"] = "Waits until a condition is met";  // untranslated
Blockly.Msg["ER_WAIT_UNTIL_TITLE"] = "Wait Until";  // untranslated
Blockly.Msg["ER_WAIT_UNTIL_TOOLTIP"] = "Wait until condition";  // untranslated
Blockly.Msg["ER_WAYPOINT_MANIPULATOR_DESCRIPTION"] = "The 'Manipulator Waypoint' can be set to tree diffrent types:</br>1) A set configuration, this is usefull to guarantee the robot returns to the same roations of the joints.</br>2) A position and orientation defined as a XYZ coordinate and a ZYX Euler rotation. The position and orientation is for a specified tool frames and defined relative to a reference frame. </br>3) A variable that can be both a configuation and a pose</br>For each waypoint the user can define a desired velocity and acceleration for the associated motion and a blend parameter. If no parameters are defined the waypoint will inherit the block from the parenting 'Move PTP' or 'Move Linear' block.";  // untranslated
Blockly.Msg["ER_WAYPOINT_MANIPULATOR_TITLE"] = "Manipulator Waypoint";  // untranslated
Blockly.Msg["ER_WAYPOINT_MANIPULATOR_TOOLTIP"] = "A postion/configuration for the manipulator to move to can either be a constant or a variable";  // untranslated
Blockly.Msg["ER_WAYPOINT_MOBILE_DESCRIPTION"] = "A waypoint (target postion) for the mobile platform can either be specified as a constant or a variable.";  // untranslated
Blockly.Msg["ER_WAYPOINT_MOBILE_TITLE"] = "Mobile Waypoint";  // untranslated
Blockly.Msg["ER_WAYPOINT_MOBILE_TOOLTIP"] = "Target postion for the Mobile platform.";  // untranslated
Blockly.Msg["ER_XYZRPY_DESCRIPTION"] = "Position and orientation of the specified tool in the selected reference frame.</br>Position are in meters.</br>Orientation specified as ZYX Euler Angles and measured in degrees.";  // untranslated
Blockly.Msg["ER_XYZRPY_TITLE"] = "Tool Configuration";  // untranslated
Blockly.Msg["ER_XYZRPY_TOOLTIP"] = "Position and orientation of the tool";  // untranslated
Blockly.Msg["EXPAND_ALL"] = "Išskleisti blokus";
Blockly.Msg["EXPAND_BLOCK"] = "Išskleisti bloką";
Blockly.Msg["EXTERNAL_INPUTS"] = "Išdėstyti stulpeliu, kai daug parametrų";
Blockly.Msg["HELP"] = "Pagalba";
Blockly.Msg["INLINE_INPUTS"] = "Išdėstyti vienoje eilutėje";
Blockly.Msg["IOS_CANCEL"] = "Atšaukti";
Blockly.Msg["IOS_ERROR"] = "Klaida";
Blockly.Msg["IOS_OK"] = "Gerai";
Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Pridėti Įvestį";
Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Allow statements";  // untranslated
Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "Ši funkcija turi pasikartojančias įvestis";
Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "ĮVESTYS";
Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Pridėti";
Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+Pridėti Kintamąjį";
Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Ištrinti";
Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "Negalite naudoti tuščio kintamojo pavadinimo.";
Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Pervadinti";
Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Kintamojo pavadinimas";
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "tuščias sąrašas";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Grąžina sąrašą, ilgio 0, neturintį duomenų";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "sąrašas";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Pridėti, pašalinti arba paskirstyti skyrius, kad pertvarkyti šį teksto bloką.";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "sukurti sąrašą su";
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Pridėti elementą į sąrašą.";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "Sukurti sąrašą iš bet kokio skaičiaus elementų.";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "pirmas";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# nuo galo";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_GET"] = "paimk";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "paimk ir ištrink";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "paskutinis";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "atsitiktinis";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "pašalinti";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Grąžina pirmąjį sąrašo elementą.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Gražina objektą į nurodyta poziciją sąraše.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Grąžina paskutinį elementą iš sąrašo.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Grąžina atsitiktinį elementą iš sąrašo.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Removes and returns the first item in a list.";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Removes and returns the item at the specified position in a list.";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Removes and returns the last item in a list.";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Removes and returns a random item in a list.";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Pašalina pirmą objektą sąraše.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Pašalina objektą iš nurodytos vietos sąraše.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Pašalina paskutinį objektą sąraše.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Pašalina atsitiktinį objektą sąraše.";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "iki # nuo galo";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "iki #";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "iki galo";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "sąrašo dalis nuo pradžios";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "sąrašo dalis nuo # nuo galo";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "sąrašo dalis nuo #";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Sukuria nurodytos sąrašo dalies kopiją.";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 yra paskutinis objektas.";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 yra pirmasis objektas.";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "rask pirmą reikšmę";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "rask paskutinę reikšmę";
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Grąžina pirmos/paskutinės reikšmės eilės nr. sąraše. Grąžina %1, jei reikšmės neranda.";
Blockly.Msg["LISTS_INLIST"] = "sąraše";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 yra tuščias";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Grąžina „true“, jeigu sąrašas tuščias.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg["LISTS_LENGTH_TITLE"] = "ilgis %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Grąžina sąrašo ilgį.";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg["LISTS_REPEAT_TITLE"] = "sukurk sąrašą, kuriame %1 bus %2 kartus";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Creates a list consisting of the given value repeated the specified number of times.";  // untranslated
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";  // untranslated
Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "reverse %1";  // untranslated
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Reverse a copy of a list.";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "kaip";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "įterpk į vietą";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "priskirk elementui";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Įterpia objektą į sąrašo pradžią.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Įterpią objektą į nurodytą poziciją sąraše.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Append the item to the end of a list.";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Įterpia objektą į atsitiktinę sąrašo vietą.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Sets the first item in a list.";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Sets the item at the specified position in a list.";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Sets the last item in a list.";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Sets a random item in a list.";  // untranslated
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "didėjančia tvarka";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "mažėjančia tvarka";
Blockly.Msg["LISTS_SORT_TITLE"] = "rūšiuoti %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Rūšiuoti sąrašo kopiją.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "abecėlės, ignoruoti raidžių dydį";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "skaitmeninis";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "abėcėlės";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "make list from text";  // untranslated
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "make text from list";  // untranslated
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Join a list of texts into one text, separated by a delimiter.";  // untranslated
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Split text into a list of texts, breaking at each delimiter.";  // untranslated
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "su dalikliu";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "klaidinga";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Reikšmė gali būti \"teisinga\"/\"Taip\" arba \"klaidinga\"/\"Ne\".";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "tiesa";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Tenkinama, jei abu reiškiniai lygūs.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Grįžti tiesa, jei pirmoji įvestis didesnė nei antroji įvestis.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Grįžti tiesa, jei pirma įvestis didesnė arba lygi antrajai įvesčiai.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Grįžti tiesa, jei pirma įvestis mažesnė nei antra įvestis.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Grįžti tiesa, jei pirma įvestis mažesnė arba lygi antrajai įvesčiai.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Grįžti tiesa, jeigu abi įvestys ne lygios tarpusavyje.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "ne %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Grįžti tiesa, jei įvestis klaidinga. Grįžti klaidinga, jei įvestis teisinga.";
Blockly.Msg["LOGIC_NULL"] = "nieko";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Reikšmė nebuvo nurodyta...";
Blockly.Msg["LOGIC_OPERATION_AND"] = "ir";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg["LOGIC_OPERATION_OR"] = "arba";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Bus teisinga, kai abi sąlygos bus tenkinamos.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Grįžti tiesa, jei bent viena įvestis teisinga.";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "sąlyga";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "jei ne";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "jei taip";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Jeigu sąlygą tenkinama, grąžina pirmą reikšmę, o jei ne - antrąją.";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";  // untranslated
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://en.wikipedia.org/wiki/Arithmetic";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Grąžina dviejų skaičių sumą.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Grąžina dviejų skaičių dalmenį.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Grąžina dviejų skaičių skirtumą.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Grąžina dviejų skaičių sandaugą.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Grąžina pirmą skaičių pakeltą laipsniu pagal antrą skaičių.";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";  // untranslated
Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 of X:%1 Y:%2";  // untranslated
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Return the arctangent of point (X, Y) in degrees from -180 to 180.";  // untranslated
Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg["MATH_CHANGE_TITLE"] = "padidink %1 (emptypage) %2";
Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "Prideda skaičių prie kintamojo '%1'. Kai skaičius neigiamas - gaunasi atimtis.";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://en.wikipedia.org/wiki/Mathematical_constant";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Grįžti viena iš pagrindinių konstantų: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…), or ∞ (begalybė).";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "apribok %1 tarp %2 ir %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Apriboti skaičių, kad būtų tarp nustatytų ribų (imtinai).";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";  // untranslated
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "yra dalus iš";
Blockly.Msg["MATH_IS_EVEN"] = "yra lyginis";
Blockly.Msg["MATH_IS_NEGATIVE"] = "yra neigiamas";
Blockly.Msg["MATH_IS_ODD"] = "yra nelyginis";
Blockly.Msg["MATH_IS_POSITIVE"] = "yra teigiamas";
Blockly.Msg["MATH_IS_PRIME"] = "yra pirminis";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Patikrina skaičiaus savybę: (ne)lyginis/pirminis/sveikasis/teigiamas/neigiamas/dalus iš x.";
Blockly.Msg["MATH_IS_WHOLE"] = "yra sveikasis";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg["MATH_MODULO_TITLE"] = "dalybos liekana %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Grįžti likučiu nuo dviejų skaičių dalybos.";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";  // untranslated
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://lt.wikipedia.org/wiki/Skaičius";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "Skaičius.";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";  // untranslated
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "vidurkis";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "didžiausia reikšmė sąraše";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "mediana sąrašui";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "mažiausia reikšmė sąraše";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "statistinė moda sąrašui";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "atsitiktinis elementas iš sąrašo";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "standartinis nuokrypis sąraše";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "suma";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Grįžti vidurkiu (aritmetinis vidurkis) iš skaitinių reikšmių sąraše.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Grįžti didžiausiu skaičiumi sąraše.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Grąžinti sąrašo medianą.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Grįžti mažiausiu skaičiumi sąraše.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Grąžinti sąrašą dažniausių elementų sąraše.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Grąžinti atsitiktinį elementą iš sąrašo.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Grįžti standartine pakraipa iš sąrašo.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "didžiausia reikšmė";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";  // untranslated
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "atsitiktinė trupmena";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Atsitiktinė trupmena nuo 0 (imtinai) iki 1 (neimtinai).";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "atsitiktinis sveikas sk. nuo %1 iki %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Grįžti atsitiktinį sveikąjį skaičių tarp dviejų nustatytų ribų, imtinai.";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://lt.wikipedia.org/wiki/Apvalinimas";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "apvalink";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "apvalink žemyn";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "apvalink aukštyn";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Suapvalinti skaičių į žemesnę ar aukštesnę reikšmę.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "modulis";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "kvadratinė šaknis";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Skaičiaus modulis - reikšmė be ženklo (panaikina minusą).";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Grąžinti skaičių laipsniu e.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Grąžinti skaičiaus natūrinį logaritmą.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Grįžti 10 pagrindinių logaritmų iš skaičiaus.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Grąžina skaičiui priešingą skaičių.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Grąžinti skaičių laipsniu 10.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Grįžti kvadratinę šaknį iš skaičiaus.";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";  // untranslated
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";  // untranslated
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";  // untranslated
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";  // untranslated
Blockly.Msg["MATH_TRIG_COS"] = "cos";  // untranslated
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://lt.wikipedia.org/wiki/Trigonometrinės_funkcijos";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";  // untranslated
Blockly.Msg["MATH_TRIG_TAN"] = "tan";  // untranslated
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Grąžinti skaičiaus arkkosinusą.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Grąžinti skaičiaus arksinusą.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Grąžinti skaičiaus arktangentą.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Grąžinti laipsnio kosinusą (ne radiano).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Grąžinti laipsnio sinusą (ne radiano).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Grąžinti laipsnio tangentą (ne radiano).";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Sukurti spalvos kintamąjį...";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Sukurti skaičiaus kintamąjį...";
Blockly.Msg["NEW_STRING_VARIABLE"] = "Create string variable...";  // untranslated
Blockly.Msg["NEW_VARIABLE"] = "Sukurti kintamąjį";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "Naujo kintamojo pavadinimas:";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "Naujas kintamojo tipas:";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";  // untranslated
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "leisti vidinius veiksmus";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "pagal:";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Vykdyti sukurtą komandą \"%1\".";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Įvykdyti komandą \"%1\" ir naudoti jos suskaičiuotą (atiduotą) reikšmę.";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "su:";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Sukurti \"%1\"";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Apibūdinkite šią funkciją...";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";  // untranslated
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "daryk kažką";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "komanda:";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Sukuria procedūrą - komandą, kuri nepateikia jokio rezultato (tik atlieka veiksmus).";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "duok";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Sukuria funkciją - komandą, kuri ne tik atlieka veiksmus bet ir pateikia (grąžina/duoda) rezultatą.";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Ši komanda turi du vienodus gaunamų duomenų pavadinimus.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Highlight function definition";  // untranslated
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "Jeigu pirma reikšmė yra teisinga (sąlyga tenkinama), grąžina antrą reikšmę.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Perspėjimas: šis blokas gali būti naudojamas tik aprašant funkciją.";
Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "parametro pavadinimas:";
Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Pridėti funkcijos parametrą (gaunamų duomenų pavadinimą).";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "gaunami duomenys (parametrai)";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Tvarkyti komandos gaunamus duomenis (parametrus).";
Blockly.Msg["REDO"] = "Atkurti";
Blockly.Msg["REMOVE_COMMENT"] = "Pašalinti komentarą";
Blockly.Msg["RENAME_VARIABLE"] = "Pervardyti kintamajį...";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Pervadinti visus '%1' kintamuosius į:";
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_APPEND_TITLE"] = "prie %1 pridėk tekstą %2";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Pridėti tekstą prie kintamojo '%1'.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = " mažosiom raidėm";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = " Pavadinimo Raidėmis";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = " DIDŽIOSIOM RAIDĖM";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Kitu atvėju, grąžina teksto kopiją.";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "gauti pirmą raidę";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "raidė nuo galo #";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "gauti raidę #";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg["TEXT_CHARAT_LAST"] = "gauti paskutinę raidę";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "gauti atsitiktinę raidę";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";  // untranslated
Blockly.Msg["TEXT_CHARAT_TITLE"] = "in text %1 %2";  // untranslated
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Grąžina raidę į tam tikrą poziciją.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "skaičius %1 iš %2";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Suskaičiuoti, kiek kartų šis tekstas kartojasi kitame tekste.";
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Pridėti teksto elementą.";
Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "sujunk";
Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "Pridėti, pašalinti arba paskirstyti skyrius, kad pertvarkyti šį teksto bloką.";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "iki raidės nuo galo #";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "iki raidės #";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "iki pabaigos";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "tekste";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "dalis nuo pradžios";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "dalis nuo raidės #";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "dalis nuo raidės #";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Grąžina tam tikrą teksto dalį.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "rask,kur pirmą kartą paminėta";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "rask,kur paskutinį kartą paminėta";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "tekste %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Grąžina pirmą/paskutinę pirmo teksto reikšmę antrame tekste. Grąžina %1, jei tekstas nerastas.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 yra tuščias";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Grįžti tiesa, jei numatytas tekstas tuščias.";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "sukurti tekstą su";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Sukurti teksto fragmentą sujungiant bet kokį skaičių fragmentų.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_LENGTH_TITLE"] = "teksto %1 ilgis";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Suranda teksto simbolių kiekį (įskaitant ir tarpus)";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg["TEXT_PRINT_TITLE"] = "spausdinti %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Spausdinti nurodytą tekstą, skaičių ar kitą reikšmę.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Prašyti vartotoją įvesti skaičių.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Prašyti vartotoją įvesti tekstą.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "paprašyk įvesti skaičių :";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "paprašyk įvesti tekstą :";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "pakeisti %1 į %2 šiame %3";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Pašalinti visas teksto dalis kitame tekste.";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "atbulai %1";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Apversti teksto simbolių tvarką.";
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "Tekstas (arba žodis, ar raidė)";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "išvalyk tarpus šonuose";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "išvalyk tarpus pradžioje";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "išvalyk tarpus pabaigoje";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Grąžina teksto kopiją, pašalinus tarpus iš vieno ar abiejų kraštų.";
Blockly.Msg["TODAY"] = "Šiandien";
Blockly.Msg["UNDO"] = "Anuliuoti";
Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "elementas";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Sukurk \"priskirk %1\"";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Returns the value of this variable.";  // untranslated
Blockly.Msg["VARIABLES_SET"] = "priskirk %1 = %2";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Sukurti 'kintamasis %1'";
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Sets this variable to be equal to the input.";  // untranslated
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "Kintamasis, pavadinimu '%1', jau egzistuoja.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "Kintamasis, pavadinimu '%1', jau egzistuoja kaip kitas tipas: '%2'.";
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Kažką pasakykite...";
Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];

Blockly.Msg["MATH_HUE"] = "230";
Blockly.Msg["LOOPS_HUE"] = "120";
Blockly.Msg["LISTS_HUE"] = "260";
Blockly.Msg["LOGIC_HUE"] = "210";
Blockly.Msg["VARIABLES_HUE"] = "330";
Blockly.Msg["TEXTS_HUE"] = "160";
Blockly.Msg["PROCEDURES_HUE"] = "290";
Blockly.Msg["COLOUR_HUE"] = "20";
Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "310";