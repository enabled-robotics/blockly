// This file was automatically generated.  Do not modify.

'use strict';

Blockly.Msg["ADD_COMMENT"] = "Adaugă un comentariu";
Blockly.Msg["BARCODE_DETECTOR_DESCRIPTION"] = "Detect a barcode, and save the data in a variable. </br>Supports EAN/UPC, Code 128, Code 39, Interleaved 2 of 5 and QR Codes.</br>To detect a barcode it is important that the barcode or QR codes is well within view of the camera and the smallest features of the code has a detectable size in the image.</br>The value of the barcode/QR code is stored as a string.";  // untranslated
Blockly.Msg["BARCODE_DETECTOR_TITLE"] = "Barcode Detection";  // untranslated
Blockly.Msg["BARCODE_DETECTOR_TOOLTIP"] = "Detect a barcode and save the data in a variable";  // untranslated
Blockly.Msg["CALIBRATE_TO_MARKER_DESCRIPTION"] = "Visual markers can be used to define local reference frames in the environment. To specify a reference based on a marker, first ensure that the marker is within view of the camera. Then do:</br>1) Specify the type of marker to calibrate to and the reference frame to use.</br>2) Press 'Calibrate To Marker' to store the calibration.</br>If the marker is correctly found the block will change from uninitialized (showing yellow warning triangle) to initialized. </br>When running the program the robot will detect the marker and update the reference. This way the robot can compensate for uncertainties cause by the mobile platform and reach targets relative to the market with high accuracy.</br>If the market cannot be detected the instruction will promt the user (generate popup in the user interface) where the user can ask to retry or cancel execution.";  // untranslated
Blockly.Msg["CALIBRATE_TO_MARKER_TITLE"] = "Calibrate to Marker";  // untranslated
Blockly.Msg["CALIBRATE_TO_MARKER_TOOLTIP"] = "Calibrate to a visual marker";  // untranslated
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "Nu se poate șterge variabila '%1' deoarece face parte din definiția funcției '%2'";
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Schimbaţi valoarea:";
Blockly.Msg["CLEAN_UP"] = "Curăță blocări";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Blocurile blocate conțin avertismente.";
Blockly.Msg["COLLAPSE_ALL"] = "Restrange blocurile";
Blockly.Msg["COLLAPSE_BLOCK"] = "Restrange blocul";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "culoare 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "culoare 2";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "http://meyerweb.com/eric/tools/color-blend/";
Blockly.Msg["COLOUR_BLEND_RATIO"] = "Raport";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "amestec";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Amestecă două culori cu un raport dat (0.0 - 1.0).";
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://ro.wikipedia.org/wiki/Culoare";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Alege o culoare din paleta de culori.";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "culoare aleatorie";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Alege o culoare la întâmplare.";
Blockly.Msg["COLOUR_RGB_BLUE"] = "albastru";
Blockly.Msg["COLOUR_RGB_GREEN"] = "verde";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "http://www.december.com/html/spec/colorper.html";
Blockly.Msg["COLOUR_RGB_RED"] = "roşu";
Blockly.Msg["COLOUR_RGB_TITLE"] = "colorează cu";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Creează o culoare cu suma specificată de roşu, verde şi albastru.  Toate valorile trebuie să fie între 0 şi 100.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "ieşi din bucla";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continuă cu următoarea iterație a buclei";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Ieși din bucla care conţine.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Sari peste restul aceastei bucle, şi continuă cu urmatoarea iteratie.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Avertisment: Acest bloc pote fi utilizat numai în interiorul unei bucle.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "pentru fiecare element %1 în listă %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "Pentru fiecare element din listă, setaţi variabila '%1' ca valoarea elementului, şi apoi faceţi unele declaraţii.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg["CONTROLS_FOR_TITLE"] = "numără cu %1 de la %2 la %3 prin %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Cu variablia \"%1\" ia o valoare din numărul început la numărul final, numara in intervalul specificat, apoi face blocurile specificate.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Adăugaţi o condiţie in blocul if.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Adauga o stare finala, cuprinde toata conditia din blocul if.";
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Adaugă, elimină sau reordonează secţiuni pentru a reconfigura acest bloc if.";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "altfel";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "altfel dacă";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "dacă";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "Dacă o valoare este adevărată, atunci fa unele declaraţii.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "Dacă o valoare este adevărat, atunci face primul bloc de declaraţii.  Altfel, face al doilea bloc de declaraţii.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "Dacă prima valoare este adevărat, atunci face primul bloc de declaraţii.  Altfel, dacă a doua valoare este adevărat, face al doilea bloc de declaraţii.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "Dacă prima valoare este adevărat, atunci face primul bloc de declaraţii.  Altfel, dacă a doua valoare este adevărat, face al doilea bloc de declaraţii.  În cazul în care niciuna din  valorilor nu este adevărat, face ultimul bloc de declaraţii.";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "fă";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "repetă de %1 ori";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Face unele afirmaţii de mai multe ori.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "Repetaţi până când";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "repetă în timp ce";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "În timp ce o valoare este adevărat, atunci face unele declaraţii.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "În timp ce o valoare este adevărat, atunci face unele declaraţii.";
Blockly.Msg["DELETE_ALL_BLOCKS"] = "Ștergi toate cele %1 (de) blocuri?";
Blockly.Msg["DELETE_BLOCK"] = "Șterge Bloc";
Blockly.Msg["DELETE_VARIABLE"] = "Ștergeți variabila '%1'";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "Șterge %1 utilizările variabilei '%2'?";
Blockly.Msg["DELETE_X_BLOCKS"] = "Ștergeți %1 Blocuri";
Blockly.Msg["DISABLE_BLOCK"] = "Dezactivaţi bloc";
Blockly.Msg["DUPLICATE_BLOCK"] = "Duplicate";
Blockly.Msg["DUPLICATE_COMMENT"] = "Coment duplicat";
Blockly.Msg["ENABLE_BLOCK"] = "Permite bloc";
Blockly.Msg["ER_ANALOG_IO_VALUE_DESCRIPTION"] = "Get value of analog IO.</br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box. </br>2) Select which of the IO Pins to read</br>Supports both getting the values of inputs and accessing values of outputs.</br>The value is return as a number.";  // untranslated
Blockly.Msg["ER_ANALOG_IO_VALUE_TITLE"] = "Analog IO";  // untranslated
Blockly.Msg["ER_ANALOG_IO_VALUE_TOOLTIP"] = "Value of Analog IO";  // untranslated
Blockly.Msg["ER_ARRAY_DESCRIPTION"] = "Array of numbers.</br>The size of the array can be extended and reduced selecting Add or Remove Element. Elements are alway appended to and removed from the back of the list.";  // untranslated
Blockly.Msg["ER_ARRAY_TITLE"] = "Array";  // untranslated
Blockly.Msg["ER_ARRAY_TOOLTIP"] = "Array of numbers";  // untranslated
Blockly.Msg["ER_BATTERY_POWER_PERCENTAGE_DESCRIPTION"] = "Value for remaining battery power in percentages.</br>The value if of type number";  // untranslated
Blockly.Msg["ER_BATTERY_POWER_PERCENTAGE_TITLE"] = "Battery Power Percentage";  // untranslated
Blockly.Msg["ER_BATTERY_POWER_PERCENTAGE_TOOLTIP"] = "Remaining battery power in percentages";  // untranslated
Blockly.Msg["ER_BOXPATTERN_DESCRIPTION"] = "Defines a set of positions in a box shaped (rectanglar) pattern";  // untranslated
Blockly.Msg["ER_BOXPATTERN_TITLE"] = "Box Pattern";  // untranslated
Blockly.Msg["ER_BOXPATTERN_TOOLTIP"] = "Defines box shaped (rectangular) pattern";  // untranslated
Blockly.Msg["ER_CALL_FUNCTION_BLOCK_DESCRIPTION"] = "Executes the instructions defined in a 'Function Block'";  // untranslated
Blockly.Msg["ER_CALL_FUNCTION_BLOCK_TITLE"] = "Call Function Block";  // untranslated
Blockly.Msg["ER_CALL_FUNCTION_BLOCK_TOOLTIP"] = "Call Function Block";  // untranslated
Blockly.Msg["ER_CONTROLS_IF_DESCRIPTION"] = "If construct with optional 'else if' and 'else'.</br>The 'If' block branches based on whether the specified condition is true or false. The condition needs to evaluate to a boolean type.</br>The 'If' block can be reconfigured to include a number of 'else if' constructs and/or an 'else' construct by clicking the small gear in the top left corner of the block.";  // untranslated
Blockly.Msg["ER_CONTROLS_IF_TITLE"] = "If";  // untranslated
Blockly.Msg["ER_CONTROLS_IF_TOOLTIP"] = "If construct with optional 'else if' and 'else'";  // untranslated
Blockly.Msg["ER_CONTROLS_REPEAT_DESCRIPTION"] = "Repeats the instructions in the body of the block the specified number of times.";  // untranslated
Blockly.Msg["ER_CONTROLS_REPEAT_TITLE"] = "Repeat";  // untranslated
Blockly.Msg["ER_CONTROLS_REPEAT_TOOLTIP"] = "Repeats a set of instruction a number of times";  // untranslated
Blockly.Msg["ER_CONTROLS_WHILE_DESCRIPTION"] = "Repeats the instructions in the body of the block until until the specified condtion is met";  // untranslated
Blockly.Msg["ER_CONTROLS_WHILE_TITLE"] = "While";  // untranslated
Blockly.Msg["ER_CONTROLS_WHILE_TOOLTIP"] = "Repeats a set of instructions untill a condtion is met";  // untranslated
Blockly.Msg["ER_DEFINE_REFERENCE_DESCRIPTION"] = "Updates the value of a reference.</br>When a reference is updated all motions relative to this reference will be relative to the new values.</br>This block enables to reuse same movements in a number of different locations. For instance, if having to execute the same assembly sequence in four locations, the movements can be programmed relative to a reference and only the reference will have to be updated for the four different locations.";  // untranslated
Blockly.Msg["ER_DEFINE_REFERENCE_TITLE"] = "Set a Reference";  // untranslated
Blockly.Msg["ER_DEFINE_REFERENCE_TOOLTIP"] = "Updates value of a reference";  // untranslated
Blockly.Msg["ER_DIG_IO_VALUE_DESCRIPTION"] = "Get value of digital IO.</br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box. </br>2) Select which of the IO Pins to read</br>Supports both getting the values of inputs and accessing values of outputs.</br>The value is return as a boolean.";  // untranslated
Blockly.Msg["ER_DIG_IO_VALUE_TITLE"] = "Digital IO";  // untranslated
Blockly.Msg["ER_DIG_IO_VALUE_TOOLTIP"] = "Value of Digital IO";  // untranslated
Blockly.Msg["ER_DRIVE_TO_CHARGING_STATION_DESCRIPTION"] = "Drive to the specified charging station and start charging.</br>Charging stations are defined within the map of the MiR. Consult the user manual for details on how ot define a charging station.";  // untranslated
Blockly.Msg["ER_DRIVE_TO_CHARGING_STATION_TITLE"] = "Drive to Charging Station";  // untranslated
Blockly.Msg["ER_DRIVE_TO_CHARGING_STATION_TOOLTIP"] = "Drive to the specified charging station and start charging";  // untranslated
Blockly.Msg["ER_DRIVE_TO_COORDINATES_DESCRIPTION"] = "Drive to the waypoints defined in the body of the instruction.";  // untranslated
Blockly.Msg["ER_DRIVE_TO_COORDINATES_TITLE"] = "Drive to Waypoints";  // untranslated
Blockly.Msg["ER_DRIVE_TO_COORDINATES_TOOLTIP"] = "Drive to the waypoints defined in the body of the instruction";  // untranslated
Blockly.Msg["ER_DRIVE_TO_DEFINED_POSITION_DESCRIPTION"] = "Positions can be defined directly in the map of the mobile robot and selected as targets using the 'Drive to Position' block.";  // untranslated
Blockly.Msg["ER_DRIVE_TO_DEFINED_POSITION_TITLE"] = "Drive to Position";  // untranslated
Blockly.Msg["ER_DRIVE_TO_DEFINED_POSITION_TOOLTIP"] = "Drive to a named position defined for the mobile robot";  // untranslated
Blockly.Msg["ER_EXIT_DESCRIPTION"] = "Exits the program being executed.</br>Can be used if the program needs to stop given a certain condition. For instance if there are no objects/markers detected.";  // untranslated
Blockly.Msg["ER_EXIT_TITLE"] = "Exit";  // untranslated
Blockly.Msg["ER_EXIT_TOOLTIP"] = "When called stops the program";  // untranslated
Blockly.Msg["ER_FORCE_ALIGN_DESCRIPTION"] = "The 'Force Align' block moves in a specified direction (defined with direction vector in given reference frame) until in contact with an object. When reaching contact it aligns the object to the surface using an impedance control.";  // untranslated
Blockly.Msg["ER_FORCE_ALIGN_TITLE"] = "Force Align";  // untranslated
Blockly.Msg["ER_FORCE_ALIGN_TOOLTIP"] = "Aligns to a surface using force/torque sensor.";  // untranslated
Blockly.Msg["ER_FUNCTION_BLOCK_DESCRIPTION"] = "Defines a sequence of instructions which can be called as a function.</br>The instrutions of the 'Function Block' is called as if they where inlined in the sequence of the caller.</br>Variables are therefore not subject to scope.";  // untranslated
Blockly.Msg["ER_FUNCTION_BLOCK_TITLE"] = "Function Block";  // untranslated
Blockly.Msg["ER_FUNCTION_BLOCK_TOOLTIP"] = "Defines a function that can be called multile times from the main program";  // untranslated
Blockly.Msg["ER_GRIPPER_MOVEQ_DESCRIPTION"] = "Open/close gripper to specified configuration";  // untranslated
Blockly.Msg["ER_GRIPPER_MOVEQ_TITLE"] = "Gripper Open/Close";  // untranslated
Blockly.Msg["ER_GRIPPER_MOVEQ_TOOLTIP"] = "Gripper Open/Close";  // untranslated
Blockly.Msg["ER_IS_TIME_DESCRIPTION"] = "Compares the current time with a set time.</br>The block support checking if time is equal, not equal, less than, less than or equal, greater than or greater than or equal.</br>Time is compared based on hours and minutes. ";  // untranslated
Blockly.Msg["ER_IS_TIME_TITLE"] = "Compares the Time";  // untranslated
Blockly.Msg["ER_IS_TIME_TOOLTIP"] = "Compares the current time with a set time";  // untranslated
Blockly.Msg["ER_LOGIC_BOOLEAN_DESCRIPTION"] = "Boolean block, set to either true or false";  // untranslated
Blockly.Msg["ER_LOGIC_BOOLEAN_TITLE"] = "Boolean";  // untranslated
Blockly.Msg["ER_LOGIC_BOOLEAN_TOOLTIP"] = "Boolean, either true or false";  // untranslated
Blockly.Msg["ER_LOGIC_COMPARE_DESCRIPTION"] = "Performs a logic comparison of two values.</br>Select which type of comparison to perform.</br>Assumes that the left and right hand sides of the comparison has identical data types. If the data types and incompatible the compare operator throws an exception. The exception can be caught using the 'Try Catch' construct. Failing to catch the exception will cause the program to halt.";  // untranslated
Blockly.Msg["ER_LOGIC_COMPARE_TITLE"] = "Compare";  // untranslated
Blockly.Msg["ER_LOGIC_COMPARE_TOOLTIP"] = "Logical comparison";  // untranslated
Blockly.Msg["ER_LOGIC_NEGATE_DESCRIPTION"] = "Negates boolean value.</br>The block only accepts values of boolean type. If needed to regate the value of a variable you need to create a logical comparison to extract the value of the variable.";  // untranslated
Blockly.Msg["ER_LOGIC_NEGATE_TITLE"] = "Negates Boolean Value";  // untranslated
Blockly.Msg["ER_LOGIC_NEGATE_TOOLTIP"] = "Negates boolean value";  // untranslated
Blockly.Msg["ER_LOGIC_OPERATION_DESCRIPTION"] = "Performs a logic operation of two boolean expression.</br>Select which type of operation to perform. The type can be logic 'and' or 'or'.</br>If the right and left hand sides of the expression do not evaluate to boolean expressions the operation throws an exception. The exception can be caught using the 'Try Catch' construct. Failing to catch the exception will cause the program to halt.";  // untranslated
Blockly.Msg["ER_LOGIC_OPERATION_TITLE"] = "Logic Operation";  // untranslated
Blockly.Msg["ER_LOGIC_OPERATION_TOOLTIP"] = "Logic Operation";  // untranslated
Blockly.Msg["ER_MATH_DESCRIPTION"] = "Provides functionality for adding, subtracting, multiplying and dividing.</br>If adding numbers or boolean with a string, the result becomes a string.</br>If the expressions do not valuate to numbers the operation throws an exception. The exception can be caught using the 'Try Catch' construct. Failing to catch the exception will cause the program to halt.";  // untranslated
Blockly.Msg["ER_MATH_NUMBER_DESCRIPTION"] = "Number value.</br>Numbers are represented a floating point values with double precision.";  // untranslated
Blockly.Msg["ER_MATH_NUMBER_TITLE"] = "Number";  // untranslated
Blockly.Msg["ER_MATH_NUMBER_TOOLTIP"] = "Number value";  // untranslated
Blockly.Msg["ER_MATH_TITLE"] = "Number Operation";  // untranslated
Blockly.Msg["ER_MATH_TOOLTIP"] = "Basic mathematical +,-,*,/ operations";  // untranslated
Blockly.Msg["ER_MIR_COORDINATES_DESCRIPTION"] = "Position (X, Y) in meter and orientation (Angle) in degrees. </br>Positions are relative to the internal map of the mobile robot. This reference is defined as the World frame.";  // untranslated
Blockly.Msg["ER_MIR_COORDINATES_TITLE"] = "Position";  // untranslated
Blockly.Msg["ER_MIR_COORDINATES_TOOLTIP"] = "Position (X, Y) in meter and orientation (Angle) in degrees";  // untranslated
Blockly.Msg["ER_MIR_MISSIONS_DESCRIPTION"] = "Missions defined in the MiR can be called using the 'Execute MiR Mission' block. Execution a mission blocks the program unil the execution of the MiR mission is finished.</br>This functionality is intended to enable user to define subprograms as mission within the MiR making advanced functionality (e.g. operating elevators) available.";  // untranslated
Blockly.Msg["ER_MIR_MISSIONS_TITLE"] = "Execute MiR Mission";  // untranslated
Blockly.Msg["ER_MIR_MISSIONS_TOOLTIP"] = "Executes a MiR mission from the MiR interface";  // untranslated
Blockly.Msg["ER_PALLETIZE_DESCRIPTION"] = "The 'Palletize' block runs a sequence of instruction for the specified amount locations specified in a pattern.</br>If a pattern is shared as a variable among multiple 'Palletize' blocks the pattern will keep track of the next location to apply.";  // untranslated
Blockly.Msg["ER_PALLETIZE_TITLE"] = "Palletize";  // untranslated
Blockly.Msg["ER_PALLETIZE_TOOLTIP"] = "Runs a sequence of instructions in a given pattern";  // untranslated
Blockly.Msg["ER_POPUP_DESCRIPTION"] = "Generated Popup message for the user. </br>The user can select to confirm with and Ok or Cancel. The result is stored as a boolean in a variable, where Ok is true and Cancel is false. This variable can later be used to branch the program based on the user input.";  // untranslated
Blockly.Msg["ER_POPUP_TITLE"] = "Popup";  // untranslated
Blockly.Msg["ER_POPUP_TOOLTIP"] = "Popup message with true/false return value";  // untranslated
Blockly.Msg["ER_PROGRAM_DESCRIPTION"] = "Defines program to be executed. </br>This block is mandatory and exactly one block will always exist.";  // untranslated
Blockly.Msg["ER_PROGRAM_TITLE"] = "Program";  // untranslated
Blockly.Msg["ER_PROGRAM_TOOLTIP"] = "Defines program to be executed";  // untranslated
Blockly.Msg["ER_Q_DESCRIPTION"] = "Configuration of the robot arm specified by joint angles. All angles specified in degrees.";  // untranslated
Blockly.Msg["ER_Q_TITLE"] = "Joint Configuration";  // untranslated
Blockly.Msg["ER_Q_TOOLTIP"] = "Configuration of the robot arm specified by joint angles. All angles specified in degrees.";  // untranslated
Blockly.Msg["ER_SET_ANALOG_OUTPUT_DESCRIPTION"] = "Set value of analog output.</br></br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box. </br>2) Select which of the IO Pins to set</br>3) Select the value";  // untranslated
Blockly.Msg["ER_SET_ANALOG_OUTPUT_TITLE"] = "Set Analog Output";  // untranslated
Blockly.Msg["ER_SET_ANALOG_OUTPUT_TOOLTIP"] = "Set value of analog output";  // untranslated
Blockly.Msg["ER_SET_DIGITAL_OUTPUT_DESCRIPTION"] = "Set value of digital output.</br></br>To configure the block do the following:</br>1) Select which IO Interface from the drop down box</br>2) Select which of the IO Pins to set</br>3) Select the value.";  // untranslated
Blockly.Msg["ER_SET_DIGITAL_OUTPUT_TITLE"] = "Set Digital Output";  // untranslated
Blockly.Msg["ER_SET_DIGITAL_OUTPUT_TOOLTIP"] = "Set value of digital output";  // untranslated
Blockly.Msg["ER_SET_PAYLOAD_DESCRIPTION"] = "To set the payload of the arm two parameters needs to be given. <br/> 1) The actual payload measured in kg and <br/>2) The position [x,y,z] (in meters) of the Center of Mass (CoM) of the payload. The position is to be measured relative to the toolmount frame and NOT the  TCP frame.";  // untranslated
Blockly.Msg["ER_SET_PAYLOAD_TITLE"] = "Set Payload";  // untranslated
Blockly.Msg["ER_SET_PAYLOAD_TOOLTIP"] = "Set the payload of the arm";  // untranslated
Blockly.Msg["ER_SET_TCP_DESCRIPTION"] = "Sets the transformation between the tool flange (the end) of the robot arm and the actual TCP. <br/> Changing the TCP in the program will offset all movements specified relative to the TCP. Movements specified in joint angles will not be impacted.";  // untranslated
Blockly.Msg["ER_SET_TCP_TITLE"] = "Set TCP";  // untranslated
Blockly.Msg["ER_SET_TCP_TOOLTIP"] = "Set the TCP of the robot";  // untranslated
Blockly.Msg["ER_STRING_DESCRIPTION"] = "String value";  // untranslated
Blockly.Msg["ER_STRING_TITLE"] = "String";  // untranslated
Blockly.Msg["ER_STRING_TOOLTIP"] = "String value";  // untranslated
Blockly.Msg["ER_THROW_DESCRIPTION"] = "Throws an exception (error message), which can be caught by the Try-Catch block.</br>If the exception is not caught it will cause the program to halt.";  // untranslated
Blockly.Msg["ER_THROW_TITLE"] = "Throw";  // untranslated
Blockly.Msg["ER_THROW_TOOLTIP"] = "Throws an error message.";  // untranslated
Blockly.Msg["ER_TRY_CATCH_DESCRIPTION"] = "'Try Catch' structure enabling catching exceptions (errors) produced by the instructions in the Try section.</br>Only if an error is triggered the instructions specified within the Catch section is executed. Use the Catch section to handle the errors.";  // untranslated
Blockly.Msg["ER_TRY_CATCH_TITLE"] = "Try Catch";  // untranslated
Blockly.Msg["ER_TRY_CATCH_TOOLTIP"] = "Try Catch structure";  // untranslated
Blockly.Msg["ER_UR_ACTION_DESCRIPTION"] = "Execute the specified event on the UR.</br>The name of the event shall match the name of an 'EventNode' specific under the ER-Ability node in the UR Polyscope interface.</br>Parameters allows passing up to 20 numbers to the event. The parameters will be available as a list variable in the UR Polyscope interface.";  // untranslated
Blockly.Msg["ER_UR_ACTION_TITLE"] = "Execute Event on UR";  // untranslated
Blockly.Msg["ER_UR_ACTION_TOOLTIP"] = "Execute the specified event on the UR";  // untranslated
Blockly.Msg["ER_UR_GOTO_DESCRIPTION"] = "Move robot in joint-space.</br>Joint-space motions gives the shortest travel by the motors in the joint. However, the tools of the robot will not move in a straight line.</br>The motion is defined by the set of specified way points.</br>Associated to a 'Move PTP' block are parameters for the maximum velocity and acceleration and blend distance. There parameters are the default settings for moving between waypoints, but can be overridden in the individual waypoints.";  // untranslated
Blockly.Msg["ER_UR_GOTO_LIN_DESCRIPTION"] = "Move robot linear in tool space.</br>Linear motions in the tool space results in straight line movements of the tool. </br>The motion is defined by the set of specified way points.</br>Associated to a 'Move Linear' block are parameters for the maximum velocity and acceleration and blend distance. There parameters are the default settings for moving between waypoints, but can be overridden in the individual waypoints.";  // untranslated
Blockly.Msg["ER_UR_GOTO_LIN_TITLE"] = "Move Linear";  // untranslated
Blockly.Msg["ER_UR_GOTO_LIN_TOOLTIP"] = "Move robot linear in tool space";  // untranslated
Blockly.Msg["ER_UR_GOTO_TITLE"] = "Move PTP";  // untranslated
Blockly.Msg["ER_UR_GOTO_TOOLTIP"] = "Move robot in joint-space";  // untranslated
Blockly.Msg["ER_UR_MOVE_REL_DESCRIPTION"] = "Executes a number of relative motions defined within the body of the block.";  // untranslated
Blockly.Msg["ER_UR_MOVE_REL_TITLE"] = "Move Relative";  // untranslated
Blockly.Msg["ER_UR_MOVE_REL_TOOLTIP"] = "Executes a number of relative motions";  // untranslated
Blockly.Msg["ER_UR_REL_MOTION_DESCRIPTION"] = "A relative motion can either be defined as:</br>1) A movement between to define waypoints</br>2) A direction (in 6D) where the length of the direction vector defines the distance to move.";  // untranslated
Blockly.Msg["ER_UR_REL_MOTION_TITLE"] = "Relative Motion";  // untranslated
Blockly.Msg["ER_UR_REL_MOTION_TOOLTIP"] = "Relative Motion";  // untranslated
Blockly.Msg["ER_UVC_SWEEP_DESCRIPTION"] = "Moves in a sweeping motion following the waypoints define in the block";  // untranslated
Blockly.Msg["ER_UVC_SWEEP_TITLE"] = "UVC sweep";  // untranslated
Blockly.Msg["ER_UVC_SWEEP_TOOLTIP"] = "Powers on the UVC lamp and sweeps across a definde area with a set speed";  // untranslated
Blockly.Msg["ER_VAR_GET_DESCRIPTION"] = "Get value of variable.</br>A variable is globally available in the program (including in sub functions) and can hold any data type available in the interface. </br>Variables and not persistent and values will not be remembers between to runs of the same program. A variables thus needs to be Set before it can be accessed. </br>Trying to get the value of a variable not yet defined results in an exception.";  // untranslated
Blockly.Msg["ER_VAR_GET_TITLE"] = "Get variable.";  // untranslated
Blockly.Msg["ER_VAR_GET_TOOLTIP"] = "Get value of variable.";  // untranslated
Blockly.Msg["ER_VAR_SET_DESCRIPTION"] = "Set value of variable.</br>A variable is globally available in the program (including in sub functions) and can hold any data type available in the interface. </br>Variables and not persistent and values will not be remembers between to runs of the same program.";  // untranslated
Blockly.Msg["ER_VAR_SET_TITLE"] = "Set Variable";  // untranslated
Blockly.Msg["ER_VAR_SET_TOOLTIP"] = "Set value of variable";  // untranslated
Blockly.Msg["ER_WAIT_DESCRIPTION"] = "Wait for the specified time before continuing execution.";  // untranslated
Blockly.Msg["ER_WAIT_FOR_MIR_PLC_DESCRIPTION"] = "Waits for a change in MiR Register before exeucting code define in the block.</br>The purpose of this block is to have the program work as a slave of the MiR, which can control the execution using the registers.";  // untranslated
Blockly.Msg["ER_WAIT_FOR_MIR_PLC_TITLE"] = "Wait for Change in MiR Register";  // untranslated
Blockly.Msg["ER_WAIT_FOR_MIR_PLC_TOOLTIP"] = "Waits for a change in MiR Register before exeucting code define in the block";  // untranslated
Blockly.Msg["ER_WAIT_TITLE"] = "Wait";  // untranslated
Blockly.Msg["ER_WAIT_TOOLTIP"] = "Wait for defined time";  // untranslated
Blockly.Msg["ER_WAIT_UNTIL_DESCRIPTION"] = "Waits until a condition is met";  // untranslated
Blockly.Msg["ER_WAIT_UNTIL_TITLE"] = "Wait Until";  // untranslated
Blockly.Msg["ER_WAIT_UNTIL_TOOLTIP"] = "Wait until condition";  // untranslated
Blockly.Msg["ER_WAYPOINT_MANIPULATOR_DESCRIPTION"] = "The 'Manipulator Waypoint' can be set to tree diffrent types:</br>1) A set configuration, this is usefull to guarantee the robot returns to the same roations of the joints.</br>2) A position and orientation defined as a XYZ coordinate and a ZYX Euler rotation. The position and orientation is for a specified tool frames and defined relative to a reference frame. </br>3) A variable that can be both a configuation and a pose</br>For each waypoint the user can define a desired velocity and acceleration for the associated motion and a blend parameter. If no parameters are defined the waypoint will inherit the block from the parenting 'Move PTP' or 'Move Linear' block.";  // untranslated
Blockly.Msg["ER_WAYPOINT_MANIPULATOR_TITLE"] = "Manipulator Waypoint";  // untranslated
Blockly.Msg["ER_WAYPOINT_MANIPULATOR_TOOLTIP"] = "A postion/configuration for the manipulator to move to can either be a constant or a variable";  // untranslated
Blockly.Msg["ER_WAYPOINT_MOBILE_DESCRIPTION"] = "A waypoint (target postion) for the mobile platform can either be specified as a constant or a variable.";  // untranslated
Blockly.Msg["ER_WAYPOINT_MOBILE_TITLE"] = "Mobile Waypoint";  // untranslated
Blockly.Msg["ER_WAYPOINT_MOBILE_TOOLTIP"] = "Target postion for the Mobile platform.";  // untranslated
Blockly.Msg["ER_XYZRPY_DESCRIPTION"] = "Position and orientation of the specified tool in the selected reference frame.</br>Position are in meters.</br>Orientation specified as ZYX Euler Angles and measured in degrees.";  // untranslated
Blockly.Msg["ER_XYZRPY_TITLE"] = "Tool Configuration";  // untranslated
Blockly.Msg["ER_XYZRPY_TOOLTIP"] = "Position and orientation of the tool";  // untranslated
Blockly.Msg["EXPAND_ALL"] = "Extinde blocuri";
Blockly.Msg["EXPAND_BLOCK"] = "Extinde bloc";
Blockly.Msg["EXTERNAL_INPUTS"] = "Intrări externe";
Blockly.Msg["HELP"] = "Ajutor";
Blockly.Msg["INLINE_INPUTS"] = "Intrări în linie";
Blockly.Msg["IOS_CANCEL"] = "Anulare";
Blockly.Msg["IOS_ERROR"] = "Eroare";
Blockly.Msg["IOS_OK"] = "OK";
Blockly.Msg["IOS_PROCEDURES_ADD_INPUT"] = "+ Adăugați intrare";
Blockly.Msg["IOS_PROCEDURES_ALLOW_STATEMENTS"] = "Permite declarațiile";
Blockly.Msg["IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR"] = "Această funcție are intrări duplicate.";
Blockly.Msg["IOS_PROCEDURES_INPUTS"] = "INTRĂRI";
Blockly.Msg["IOS_VARIABLES_ADD_BUTTON"] = "Adaugă";
Blockly.Msg["IOS_VARIABLES_ADD_VARIABLE"] = "+Adăugați variabilă";
Blockly.Msg["IOS_VARIABLES_DELETE_BUTTON"] = "Ştergeți";
Blockly.Msg["IOS_VARIABLES_EMPTY_NAME_ERROR"] = "Nu puteți utiliza un nume de variabilă gol.";
Blockly.Msg["IOS_VARIABLES_RENAME_BUTTON"] = "Redenumire";
Blockly.Msg["IOS_VARIABLES_VARIABLE_NAME"] = "Numele variabilei";
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "creează listă goală";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Returnează o listă, de lungime 0, care nu conţine înregistrări de date";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "listă";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Adaugă, elimină sau reordonează secţiuni ca să reconfiguraţi aceste blocuri de listă.";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "creează listă cu";
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Adăugaţi un element la listă.";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "Creaţi o listă cu orice număr de elemente.";
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "primul";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# de la sfârșit";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";
Blockly.Msg["LISTS_GET_INDEX_GET"] = "obţine";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "obţine şi elimină";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "ultimul";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "aleator";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "elimină";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Returnează primul element dintr-o listă.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Returneaza elementul la poziţia specificată într-o listă.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Returnează ultimul element într-o listă.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Returneaza un element aleatoriu într-o listă.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Elimină şi returnează primul element într-o listă.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Elimină şi returneaza elementul la poziţia specificată într-o listă.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Elimină şi returnează ultimul element într-o listă.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Elimină şi returnează un element aleatoriu într-o listă.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Elimină primul element într-o listă.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Elimină elementul la poziţia specificată într-o listă.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Elimină ultimul element într-o listă.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Elimină un element aleatoriu într-o listă.";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "la # de la sfarsit";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "la #";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "la ultima";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "obţine sub-lista de la primul";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "obţine sub-lista de la # de la sfârşitul";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "obţine sub-lista de la #";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Creează o copie a porţiunii specificate dintr-o listă.";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 este ultimul element.";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 este primul element.";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "Găseşte prima apariţie a elementului";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "găseşte ultima apariţie a elementului";
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Returnează indexul primei/ultimei apariții a articolului din listă. Returnează %1 dacă elementul nu este găsit.";
Blockly.Msg["LISTS_INLIST"] = "în listă";
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 este gol";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Returnează adevărat dacă lista este goală.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg["LISTS_LENGTH_TITLE"] = "lungime de %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Returnează lungimea unei liste.";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg["LISTS_REPEAT_TITLE"] = "creaza lista cu %1 elemente repetate de %2 ori";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Creează o listă alcătuită dintr-o anumită valoare repetată de numărul specificat de ori.";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";  // untranslated
Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "inversă %1";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Inversați copia unei liste.";
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_INPUT_TO"] = "ca";
Blockly.Msg["LISTS_SET_INDEX_INSERT"] = "introduceţi la";
Blockly.Msg["LISTS_SET_INDEX_SET"] = "seteaza";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST"] = "Inserează elementul la începutul unei liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_FROM"] = "Inserează elementul la poziţia specificată într-o listă.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_LAST"] = "Adăugă elementul la sfârşitul unei liste.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM"] = "Inserează elementul aleatoriu într-o listă.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FIRST"] = "Setează primul element într-o listă.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_FROM"] = "Setează elementul la poziţia specificată într-o listă.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_LAST"] = "Setează ultimul element într-o listă.";
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_SET_RANDOM"] = "Setează un element aleator într-o listă.";
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "crescător";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "descrescător";
Blockly.Msg["LISTS_SORT_TITLE"] = "sortați %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Sortați o copie a unei liste.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "alfabetic, ignorați cazul";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "numeric";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "alfabetic";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "convertește textul în listă";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "convertește lista în text";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Concatenează o listă de texte (alternate cu separatorul) într-un text unic";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Împarte textul într-o listă de texte, despărțite prin fiecare separator";
Blockly.Msg["LISTS_SPLIT_WITH_DELIMITER"] = "cu separatorul";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "fals";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Returnează adevărat sau fals.";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "adevărat";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://en.wikipedia.org/wiki/Inequality_(mathematics)";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Returnează adevărat dacă ambele intrări sunt egale.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Returnează adevărat dacă prima intrare este mai mare decât a doua intrare.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Returnează adevărat dacă prima intrare este mai mare sau egală cu a doua intrare.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Returnează adevărat dacă prima intrare este mai mică decât a doua intrare.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Returnează adevărat dacă prima intrare este mai mică sau egală cu a doua intrare.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Returnează adevărat daca cele două intrări nu sunt egale.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "non %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Returnează adevărat dacă intrarea este falsă.  Returnează fals dacă intrarea este adevărată.";
Blockly.Msg["LOGIC_NULL"] = "nul";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "returnează nul.";
Blockly.Msg["LOGIC_OPERATION_AND"] = "şi";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg["LOGIC_OPERATION_OR"] = "sau";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Returnează adevărat daca ambele intrări sunt adevărate.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Returnează adevărat dacă cel puţin una din intrări este adevărată.";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "test";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "dacă este fals";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "dacă este adevărat";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Verifică condiţia din \"test\". Dacă condiţia este adevărată, returnează valoarea \"în cazul în care adevărat\"; în caz contrar întoarce valoarea \"în cazul în care e fals\".";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://ro.wikipedia.org/wiki/Aritmetic%C4%83";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Returnează suma a două numere.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Returnează câtul celor două numere.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Returneaza diferenţa dintre cele două numere.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Returnează produsul celor două numere.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Returneaza numărul rezultat prin ridicarea primului număr la puterea celui de-al doilea.";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://en.wikipedia.org/wiki/Atan2";
Blockly.Msg["MATH_ATAN2_TITLE"] = "atan2 of X:%1 Y:%2";
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Întoarceți arctangentul punctului (X, Y) în grade de la -180 la 180.";
Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg["MATH_CHANGE_TITLE"] = "schimbă %1 de %2";
Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "Adaugă un număr variabilei '%1'.";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://ro.wikipedia.org/wiki/Constant%C4%83_matematic%C4%83";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Întoarcă una din constantele comune: π (3.141...), e (2.718...), φ (1,618...), sqrt(2) (1.414...), sqrt(½) (0.707...) sau ∞ (infinitate).";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "constrânge %1 redus %2 ridicat %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Constrânge un număr să fie între limitele specificate (inclusiv).";
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "este divizibil cu";
Blockly.Msg["MATH_IS_EVEN"] = "este par";
Blockly.Msg["MATH_IS_NEGATIVE"] = "este negativ";
Blockly.Msg["MATH_IS_ODD"] = "este impar";
Blockly.Msg["MATH_IS_POSITIVE"] = "este pozitiv";
Blockly.Msg["MATH_IS_PRIME"] = "este prim";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Verifică dacă un număr este un par, impar, prim, întreg, pozitiv, negativ, sau dacă este divizibil cu un anumit număr.  Returnează true sau false.";
Blockly.Msg["MATH_IS_WHOLE"] = "este întreg";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg["MATH_MODULO_TITLE"] = "restul la %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Întoarce restul din împărţirea celor două numere.";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://en.wikipedia.org/wiki/Number";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "Un număr.";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";  // untranslated
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "media listei";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "maximul listei";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "media listei";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "minimul listei";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "moduri de listă";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "element aleatoriu din lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "deviația standard a listei";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "suma listei";
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Întoarce media (aritmetică) a valorilor numerice în listă.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Întoarce cel mai mare număr din listă.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Întoarce numărul median în listă.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Returnează cel mai mic număr din listă.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Returnează o listă cu cel(e) mai frecvent(e) element(e) din listă.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Returnează un element aleatoriu din listă.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Întoarce deviația standard a listei.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Returnează suma tuturor numerelor din lista.";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "fracții aleatorii";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Returnează o fracţie aleatoare între 0.0 (inclusiv) si 1.0 (exclusiv).";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://en.wikipedia.org/wiki/Random_number_generation";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "un număr întreg aleator de la %1 la %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Returnează un număr întreg aleator aflat între cele două limite specificate, inclusiv.";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://en.wikipedia.org/wiki/Rounding";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "rotund";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "rotunjit";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "rotunjește în sus";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Rotunjirea unui număr în sus sau în jos.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://en.wikipedia.org/wiki/Square_root";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "absolută";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "rădăcina pătrată";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Returnează valoarea absolută a unui număr.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Returnează e la puterea unui număr.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Întoarce logaritmul natural al unui număr.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Returnează logaritmul în baza 10 a unui număr.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Returnează negaţia unui număr.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Returnează 10 la puterea unui număr.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Returnează rădăcina pătrată a unui număr.";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";
Blockly.Msg["MATH_TRIG_ACOS"] = "arccos";
Blockly.Msg["MATH_TRIG_ASIN"] = "arcsin";
Blockly.Msg["MATH_TRIG_ATAN"] = "arctg";
Blockly.Msg["MATH_TRIG_COS"] = "cos";
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://ro.wikipedia.org/wiki/Funcții_trigonometrice";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";
Blockly.Msg["MATH_TRIG_TAN"] = "tg";
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Returnează arccosinusul unui număr.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Returnează arcsinusul unui număr.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Returnează arctangenta unui număr.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Întoarce cosinusul unui grad (nu radianul).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Întoarce cosinusul unui grad (nu radianul).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Întoarce tangenta unui grad (nu radianul).";
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Crează o variabilă culoare";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Crează o variabilă număr";
Blockly.Msg["NEW_STRING_VARIABLE"] = "Crează o variabilă string";
Blockly.Msg["NEW_VARIABLE"] = "Crează variabilă";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "Noul nume de variabilă:";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "Tip nou de variabilă";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";  // untranslated
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "permite declarațiile";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "cu:";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Executați funcția '%1 'definită de utilizator.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Executați funcția '%1 'definită de utilizator şi folosiţi producţia sa.";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "cu:";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Creaţi '%1'";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Descrieți această funcție ...";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";  // untranslated
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Procedure_%28computer_science%29";
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "fă ceva";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "la";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Crează o funcţie cu nici o ieşire.";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://ro.wikipedia.org/wiki/Subrutină";
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "returnează";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Creează o funcţie cu o ieşire.";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Atenţie: Această funcţie are parametri duplicaţi.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Evidenţiază definiţia funcţiei";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "Dacă o valoare este adevărată, atunci returnează valoarea a doua.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Avertisment: Acest bloc poate fi utilizat numai în definiţia unei funcţii.";
Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "nume de intrare:";
Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Adaugă un parametru de intrare pentru funcție.";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "intrări";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Adăugă, șterge sau reordonează parametrii de intrare ai acestei funcții.";
Blockly.Msg["REDO"] = "Refă";
Blockly.Msg["REMOVE_COMMENT"] = "Elimină comentariu";
Blockly.Msg["RENAME_VARIABLE"] = "Redenumirea variabilei...";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Redenumeşte toate variabilele '%1' în:";
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_APPEND_TITLE"] = "la %1 Adăugaţi text %2";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Adăugaţi text la variabila '%1'.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "la litere mici";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "către Titlul de caz";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "la MAJUSCULE";
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Întoarce o copie a textului într-un caz diferit.";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "obţine prima litera";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "obţine litera # de la sfârșit";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "obtine litera #";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg["TEXT_CHARAT_LAST"] = "obţine o litera oarecare";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "obtine o litera oarecare";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";  // untranslated
Blockly.Msg["TEXT_CHARAT_TITLE"] = "în text %1 %2";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Returnează litera la poziția specificată.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";  // untranslated
Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "numără %1 in %2";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Aflați de câte ori apare un text într-un alt text.";
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Adaugă un element în text.";
Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "alăturaţi-vă";
Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "Adaugă, elimină sau reordonează secțiuni ca să reconfigureze blocul text.";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "la litera # de la sfarsit";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "la litera #";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "la ultima literă";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "în text";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "obţine un subșir de la prima literă";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "obține un subșir de la litera # de la sfârșit";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "obține subșir de la litera #";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Returnează o anumită parte din text.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "găseşte prima apariţie a textului";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "găseşte ultima apariţie a textului";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "în text %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Returnează indicele primei/ultimei apariţii din primul text în al doilea text.  Returnează %1 dacă textul nu este găsit.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 este gol";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Returnează adevărat dacă textul furnizat este gol.";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "crează text cu";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Creaţi o bucată de text prin unirea oricărui număr de elemente.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_LENGTH_TITLE"] = "lungime de %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Returnează numărul de litere (inclusiv spaţiile) în textul furnizat.";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg["TEXT_PRINT_TITLE"] = "imprimare %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Afișează textul specificat, numărul sau altă valoare.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Solicită utilizatorul pentru un număr.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Solicită utilizatorul pentru text.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "solicită pentru număr cu mesaj";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "solicită pentru text cu mesaj";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";  // untranslated
Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "înlocuiți %1 cu %2 în %3";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Înlocuiți toate aparițiile anumitor texte într-un alt text.";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";  // untranslated
Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "inversă %1";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Inversează ordinea caracterelor din text.";
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://en.wikipedia.org/wiki/String_(computer_science)";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "O literă, cuvânt sau linie de text.";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "taie spațiile de pe ambele părți ale";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "tăiaţi spațiile din partea stângă a";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "taie spațiile din partea dreaptă a";
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Returnează o copie a textului fără spațiile de la unul sau ambele capete.";
Blockly.Msg["TODAY"] = "Astăzi";
Blockly.Msg["UNDO"] = "Anulează";
Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "element";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Crează 'set %1'";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Returnează valoarea acestei variabile.";
Blockly.Msg["VARIABLES_SET"] = "seteaza %1 la %2";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Crează 'get %1'";
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Setează această variabilă sa fie egală la intrare.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "O variabilă cu numele '%1'  există deja.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "o variabilă numită '%1' există deja pentru alt tip: '%2'.";
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Spune ceva...";
Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];

Blockly.Msg["MATH_HUE"] = "230";
Blockly.Msg["LOOPS_HUE"] = "120";
Blockly.Msg["LISTS_HUE"] = "260";
Blockly.Msg["LOGIC_HUE"] = "210";
Blockly.Msg["VARIABLES_HUE"] = "330";
Blockly.Msg["TEXTS_HUE"] = "160";
Blockly.Msg["PROCEDURES_HUE"] = "290";
Blockly.Msg["COLOUR_HUE"] = "20";
Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "310";